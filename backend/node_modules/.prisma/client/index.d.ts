
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Video
 * 
 */
export type Video = $Result.DefaultSelection<Prisma.$VideoPayload>
/**
 * Model Momento
 * 
 */
export type Momento = $Result.DefaultSelection<Prisma.$MomentoPayload>
/**
 * Model Corte
 * 
 */
export type Corte = $Result.DefaultSelection<Prisma.$CortePayload>
/**
 * Model Render
 * 
 */
export type Render = $Result.DefaultSelection<Prisma.$RenderPayload>
/**
 * Model Publicacao
 * 
 */
export type Publicacao = $Result.DefaultSelection<Prisma.$PublicacaoPayload>
/**
 * Model Job
 * 
 */
export type Job = $Result.DefaultSelection<Prisma.$JobPayload>
/**
 * Model Transcricao
 * 
 */
export type Transcricao = $Result.DefaultSelection<Prisma.$TranscricaoPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Videos
 * const videos = await prisma.video.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Videos
   * const videos = await prisma.video.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.video`: Exposes CRUD operations for the **Video** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Videos
    * const videos = await prisma.video.findMany()
    * ```
    */
  get video(): Prisma.VideoDelegate<ExtArgs>;

  /**
   * `prisma.momento`: Exposes CRUD operations for the **Momento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Momentos
    * const momentos = await prisma.momento.findMany()
    * ```
    */
  get momento(): Prisma.MomentoDelegate<ExtArgs>;

  /**
   * `prisma.corte`: Exposes CRUD operations for the **Corte** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Cortes
    * const cortes = await prisma.corte.findMany()
    * ```
    */
  get corte(): Prisma.CorteDelegate<ExtArgs>;

  /**
   * `prisma.render`: Exposes CRUD operations for the **Render** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Renders
    * const renders = await prisma.render.findMany()
    * ```
    */
  get render(): Prisma.RenderDelegate<ExtArgs>;

  /**
   * `prisma.publicacao`: Exposes CRUD operations for the **Publicacao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Publicacaos
    * const publicacaos = await prisma.publicacao.findMany()
    * ```
    */
  get publicacao(): Prisma.PublicacaoDelegate<ExtArgs>;

  /**
   * `prisma.job`: Exposes CRUD operations for the **Job** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.job.findMany()
    * ```
    */
  get job(): Prisma.JobDelegate<ExtArgs>;

  /**
   * `prisma.transcricao`: Exposes CRUD operations for the **Transcricao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transcricaos
    * const transcricaos = await prisma.transcricao.findMany()
    * ```
    */
  get transcricao(): Prisma.TranscricaoDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Video: 'Video',
    Momento: 'Momento',
    Corte: 'Corte',
    Render: 'Render',
    Publicacao: 'Publicacao',
    Job: 'Job',
    Transcricao: 'Transcricao'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "video" | "momento" | "corte" | "render" | "publicacao" | "job" | "transcricao"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Video: {
        payload: Prisma.$VideoPayload<ExtArgs>
        fields: Prisma.VideoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VideoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VideoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findFirst: {
            args: Prisma.VideoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VideoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          findMany: {
            args: Prisma.VideoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          create: {
            args: Prisma.VideoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          createMany: {
            args: Prisma.VideoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VideoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>[]
          }
          delete: {
            args: Prisma.VideoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          update: {
            args: Prisma.VideoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          deleteMany: {
            args: Prisma.VideoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VideoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.VideoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VideoPayload>
          }
          aggregate: {
            args: Prisma.VideoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVideo>
          }
          groupBy: {
            args: Prisma.VideoGroupByArgs<ExtArgs>
            result: $Utils.Optional<VideoGroupByOutputType>[]
          }
          count: {
            args: Prisma.VideoCountArgs<ExtArgs>
            result: $Utils.Optional<VideoCountAggregateOutputType> | number
          }
        }
      }
      Momento: {
        payload: Prisma.$MomentoPayload<ExtArgs>
        fields: Prisma.MomentoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MomentoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MomentoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          findFirst: {
            args: Prisma.MomentoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MomentoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          findMany: {
            args: Prisma.MomentoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>[]
          }
          create: {
            args: Prisma.MomentoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          createMany: {
            args: Prisma.MomentoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MomentoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>[]
          }
          delete: {
            args: Prisma.MomentoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          update: {
            args: Prisma.MomentoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          deleteMany: {
            args: Prisma.MomentoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MomentoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.MomentoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MomentoPayload>
          }
          aggregate: {
            args: Prisma.MomentoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMomento>
          }
          groupBy: {
            args: Prisma.MomentoGroupByArgs<ExtArgs>
            result: $Utils.Optional<MomentoGroupByOutputType>[]
          }
          count: {
            args: Prisma.MomentoCountArgs<ExtArgs>
            result: $Utils.Optional<MomentoCountAggregateOutputType> | number
          }
        }
      }
      Corte: {
        payload: Prisma.$CortePayload<ExtArgs>
        fields: Prisma.CorteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CorteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CorteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          findFirst: {
            args: Prisma.CorteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CorteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          findMany: {
            args: Prisma.CorteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>[]
          }
          create: {
            args: Prisma.CorteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          createMany: {
            args: Prisma.CorteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CorteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>[]
          }
          delete: {
            args: Prisma.CorteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          update: {
            args: Prisma.CorteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          deleteMany: {
            args: Prisma.CorteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CorteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CorteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CortePayload>
          }
          aggregate: {
            args: Prisma.CorteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCorte>
          }
          groupBy: {
            args: Prisma.CorteGroupByArgs<ExtArgs>
            result: $Utils.Optional<CorteGroupByOutputType>[]
          }
          count: {
            args: Prisma.CorteCountArgs<ExtArgs>
            result: $Utils.Optional<CorteCountAggregateOutputType> | number
          }
        }
      }
      Render: {
        payload: Prisma.$RenderPayload<ExtArgs>
        fields: Prisma.RenderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RenderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RenderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          findFirst: {
            args: Prisma.RenderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RenderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          findMany: {
            args: Prisma.RenderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>[]
          }
          create: {
            args: Prisma.RenderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          createMany: {
            args: Prisma.RenderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RenderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>[]
          }
          delete: {
            args: Prisma.RenderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          update: {
            args: Prisma.RenderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          deleteMany: {
            args: Prisma.RenderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RenderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RenderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RenderPayload>
          }
          aggregate: {
            args: Prisma.RenderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRender>
          }
          groupBy: {
            args: Prisma.RenderGroupByArgs<ExtArgs>
            result: $Utils.Optional<RenderGroupByOutputType>[]
          }
          count: {
            args: Prisma.RenderCountArgs<ExtArgs>
            result: $Utils.Optional<RenderCountAggregateOutputType> | number
          }
        }
      }
      Publicacao: {
        payload: Prisma.$PublicacaoPayload<ExtArgs>
        fields: Prisma.PublicacaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PublicacaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PublicacaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          findFirst: {
            args: Prisma.PublicacaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PublicacaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          findMany: {
            args: Prisma.PublicacaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>[]
          }
          create: {
            args: Prisma.PublicacaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          createMany: {
            args: Prisma.PublicacaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PublicacaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>[]
          }
          delete: {
            args: Prisma.PublicacaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          update: {
            args: Prisma.PublicacaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          deleteMany: {
            args: Prisma.PublicacaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PublicacaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PublicacaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PublicacaoPayload>
          }
          aggregate: {
            args: Prisma.PublicacaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePublicacao>
          }
          groupBy: {
            args: Prisma.PublicacaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<PublicacaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.PublicacaoCountArgs<ExtArgs>
            result: $Utils.Optional<PublicacaoCountAggregateOutputType> | number
          }
        }
      }
      Job: {
        payload: Prisma.$JobPayload<ExtArgs>
        fields: Prisma.JobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findFirst: {
            args: Prisma.JobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          findMany: {
            args: Prisma.JobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          create: {
            args: Prisma.JobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          createMany: {
            args: Prisma.JobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>[]
          }
          delete: {
            args: Prisma.JobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          update: {
            args: Prisma.JobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          deleteMany: {
            args: Prisma.JobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.JobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JobPayload>
          }
          aggregate: {
            args: Prisma.JobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJob>
          }
          groupBy: {
            args: Prisma.JobGroupByArgs<ExtArgs>
            result: $Utils.Optional<JobGroupByOutputType>[]
          }
          count: {
            args: Prisma.JobCountArgs<ExtArgs>
            result: $Utils.Optional<JobCountAggregateOutputType> | number
          }
        }
      }
      Transcricao: {
        payload: Prisma.$TranscricaoPayload<ExtArgs>
        fields: Prisma.TranscricaoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TranscricaoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TranscricaoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          findFirst: {
            args: Prisma.TranscricaoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TranscricaoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          findMany: {
            args: Prisma.TranscricaoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>[]
          }
          create: {
            args: Prisma.TranscricaoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          createMany: {
            args: Prisma.TranscricaoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TranscricaoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>[]
          }
          delete: {
            args: Prisma.TranscricaoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          update: {
            args: Prisma.TranscricaoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          deleteMany: {
            args: Prisma.TranscricaoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TranscricaoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TranscricaoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TranscricaoPayload>
          }
          aggregate: {
            args: Prisma.TranscricaoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTranscricao>
          }
          groupBy: {
            args: Prisma.TranscricaoGroupByArgs<ExtArgs>
            result: $Utils.Optional<TranscricaoGroupByOutputType>[]
          }
          count: {
            args: Prisma.TranscricaoCountArgs<ExtArgs>
            result: $Utils.Optional<TranscricaoCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type VideoCountOutputType
   */

  export type VideoCountOutputType = {
    cortes: number
    transcricoes: number
    momentos: number
  }

  export type VideoCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cortes?: boolean | VideoCountOutputTypeCountCortesArgs
    transcricoes?: boolean | VideoCountOutputTypeCountTranscricoesArgs
    momentos?: boolean | VideoCountOutputTypeCountMomentosArgs
  }

  // Custom InputTypes
  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VideoCountOutputType
     */
    select?: VideoCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountCortesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorteWhereInput
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountTranscricoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TranscricaoWhereInput
  }

  /**
   * VideoCountOutputType without action
   */
  export type VideoCountOutputTypeCountMomentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MomentoWhereInput
  }


  /**
   * Count Type CorteCountOutputType
   */

  export type CorteCountOutputType = {
    renders: number
    publicacoes: number
  }

  export type CorteCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    renders?: boolean | CorteCountOutputTypeCountRendersArgs
    publicacoes?: boolean | CorteCountOutputTypeCountPublicacoesArgs
  }

  // Custom InputTypes
  /**
   * CorteCountOutputType without action
   */
  export type CorteCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CorteCountOutputType
     */
    select?: CorteCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CorteCountOutputType without action
   */
  export type CorteCountOutputTypeCountRendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenderWhereInput
  }

  /**
   * CorteCountOutputType without action
   */
  export type CorteCountOutputTypeCountPublicacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacaoWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Video
   */

  export type AggregateVideo = {
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  export type VideoAvgAggregateOutputType = {
    id: number | null
    largura: number | null
    altura: number | null
    duracao: number | null
  }

  export type VideoSumAggregateOutputType = {
    id: number | null
    largura: number | null
    altura: number | null
    duracao: number | null
  }

  export type VideoMinAggregateOutputType = {
    id: number | null
    nome: string | null
    caminho: string | null
    largura: number | null
    altura: number | null
    duracao: number | null
    status: string | null
    criadoEm: Date | null
  }

  export type VideoMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    caminho: string | null
    largura: number | null
    altura: number | null
    duracao: number | null
    status: string | null
    criadoEm: Date | null
  }

  export type VideoCountAggregateOutputType = {
    id: number
    nome: number
    caminho: number
    largura: number
    altura: number
    duracao: number
    status: number
    criadoEm: number
    _all: number
  }


  export type VideoAvgAggregateInputType = {
    id?: true
    largura?: true
    altura?: true
    duracao?: true
  }

  export type VideoSumAggregateInputType = {
    id?: true
    largura?: true
    altura?: true
    duracao?: true
  }

  export type VideoMinAggregateInputType = {
    id?: true
    nome?: true
    caminho?: true
    largura?: true
    altura?: true
    duracao?: true
    status?: true
    criadoEm?: true
  }

  export type VideoMaxAggregateInputType = {
    id?: true
    nome?: true
    caminho?: true
    largura?: true
    altura?: true
    duracao?: true
    status?: true
    criadoEm?: true
  }

  export type VideoCountAggregateInputType = {
    id?: true
    nome?: true
    caminho?: true
    largura?: true
    altura?: true
    duracao?: true
    status?: true
    criadoEm?: true
    _all?: true
  }

  export type VideoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Video to aggregate.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Videos
    **/
    _count?: true | VideoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: VideoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: VideoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VideoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VideoMaxAggregateInputType
  }

  export type GetVideoAggregateType<T extends VideoAggregateArgs> = {
        [P in keyof T & keyof AggregateVideo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVideo[P]>
      : GetScalarType<T[P], AggregateVideo[P]>
  }




  export type VideoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VideoWhereInput
    orderBy?: VideoOrderByWithAggregationInput | VideoOrderByWithAggregationInput[]
    by: VideoScalarFieldEnum[] | VideoScalarFieldEnum
    having?: VideoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VideoCountAggregateInputType | true
    _avg?: VideoAvgAggregateInputType
    _sum?: VideoSumAggregateInputType
    _min?: VideoMinAggregateInputType
    _max?: VideoMaxAggregateInputType
  }

  export type VideoGroupByOutputType = {
    id: number
    nome: string
    caminho: string
    largura: number | null
    altura: number | null
    duracao: number | null
    status: string
    criadoEm: Date
    _count: VideoCountAggregateOutputType | null
    _avg: VideoAvgAggregateOutputType | null
    _sum: VideoSumAggregateOutputType | null
    _min: VideoMinAggregateOutputType | null
    _max: VideoMaxAggregateOutputType | null
  }

  type GetVideoGroupByPayload<T extends VideoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VideoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VideoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VideoGroupByOutputType[P]>
            : GetScalarType<T[P], VideoGroupByOutputType[P]>
        }
      >
    >


  export type VideoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    caminho?: boolean
    largura?: boolean
    altura?: boolean
    duracao?: boolean
    status?: boolean
    criadoEm?: boolean
    cortes?: boolean | Video$cortesArgs<ExtArgs>
    transcricoes?: boolean | Video$transcricoesArgs<ExtArgs>
    momentos?: boolean | Video$momentosArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["video"]>

  export type VideoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    caminho?: boolean
    largura?: boolean
    altura?: boolean
    duracao?: boolean
    status?: boolean
    criadoEm?: boolean
  }, ExtArgs["result"]["video"]>

  export type VideoSelectScalar = {
    id?: boolean
    nome?: boolean
    caminho?: boolean
    largura?: boolean
    altura?: boolean
    duracao?: boolean
    status?: boolean
    criadoEm?: boolean
  }

  export type VideoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    cortes?: boolean | Video$cortesArgs<ExtArgs>
    transcricoes?: boolean | Video$transcricoesArgs<ExtArgs>
    momentos?: boolean | Video$momentosArgs<ExtArgs>
    _count?: boolean | VideoCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type VideoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $VideoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Video"
    objects: {
      cortes: Prisma.$CortePayload<ExtArgs>[]
      transcricoes: Prisma.$TranscricaoPayload<ExtArgs>[]
      momentos: Prisma.$MomentoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      caminho: string
      largura: number | null
      altura: number | null
      duracao: number | null
      status: string
      criadoEm: Date
    }, ExtArgs["result"]["video"]>
    composites: {}
  }

  type VideoGetPayload<S extends boolean | null | undefined | VideoDefaultArgs> = $Result.GetResult<Prisma.$VideoPayload, S>

  type VideoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VideoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VideoCountAggregateInputType | true
    }

  export interface VideoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Video'], meta: { name: 'Video' } }
    /**
     * Find zero or one Video that matches the filter.
     * @param {VideoFindUniqueArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VideoFindUniqueArgs>(args: SelectSubset<T, VideoFindUniqueArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Video that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {VideoFindUniqueOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VideoFindUniqueOrThrowArgs>(args: SelectSubset<T, VideoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Video that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VideoFindFirstArgs>(args?: SelectSubset<T, VideoFindFirstArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Video that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindFirstOrThrowArgs} args - Arguments to find a Video
     * @example
     * // Get one Video
     * const video = await prisma.video.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VideoFindFirstOrThrowArgs>(args?: SelectSubset<T, VideoFindFirstOrThrowArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Videos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Videos
     * const videos = await prisma.video.findMany()
     * 
     * // Get first 10 Videos
     * const videos = await prisma.video.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const videoWithIdOnly = await prisma.video.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VideoFindManyArgs>(args?: SelectSubset<T, VideoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Video.
     * @param {VideoCreateArgs} args - Arguments to create a Video.
     * @example
     * // Create one Video
     * const Video = await prisma.video.create({
     *   data: {
     *     // ... data to create a Video
     *   }
     * })
     * 
     */
    create<T extends VideoCreateArgs>(args: SelectSubset<T, VideoCreateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Videos.
     * @param {VideoCreateManyArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VideoCreateManyArgs>(args?: SelectSubset<T, VideoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Videos and returns the data saved in the database.
     * @param {VideoCreateManyAndReturnArgs} args - Arguments to create many Videos.
     * @example
     * // Create many Videos
     * const video = await prisma.video.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Videos and only return the `id`
     * const videoWithIdOnly = await prisma.video.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VideoCreateManyAndReturnArgs>(args?: SelectSubset<T, VideoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Video.
     * @param {VideoDeleteArgs} args - Arguments to delete one Video.
     * @example
     * // Delete one Video
     * const Video = await prisma.video.delete({
     *   where: {
     *     // ... filter to delete one Video
     *   }
     * })
     * 
     */
    delete<T extends VideoDeleteArgs>(args: SelectSubset<T, VideoDeleteArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Video.
     * @param {VideoUpdateArgs} args - Arguments to update one Video.
     * @example
     * // Update one Video
     * const video = await prisma.video.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VideoUpdateArgs>(args: SelectSubset<T, VideoUpdateArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Videos.
     * @param {VideoDeleteManyArgs} args - Arguments to filter Videos to delete.
     * @example
     * // Delete a few Videos
     * const { count } = await prisma.video.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VideoDeleteManyArgs>(args?: SelectSubset<T, VideoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Videos
     * const video = await prisma.video.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VideoUpdateManyArgs>(args: SelectSubset<T, VideoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Video.
     * @param {VideoUpsertArgs} args - Arguments to update or create a Video.
     * @example
     * // Update or create a Video
     * const video = await prisma.video.upsert({
     *   create: {
     *     // ... data to create a Video
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Video we want to update
     *   }
     * })
     */
    upsert<T extends VideoUpsertArgs>(args: SelectSubset<T, VideoUpsertArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Videos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoCountArgs} args - Arguments to filter Videos to count.
     * @example
     * // Count the number of Videos
     * const count = await prisma.video.count({
     *   where: {
     *     // ... the filter for the Videos we want to count
     *   }
     * })
    **/
    count<T extends VideoCountArgs>(
      args?: Subset<T, VideoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VideoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VideoAggregateArgs>(args: Subset<T, VideoAggregateArgs>): Prisma.PrismaPromise<GetVideoAggregateType<T>>

    /**
     * Group by Video.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VideoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VideoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VideoGroupByArgs['orderBy'] }
        : { orderBy?: VideoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VideoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVideoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Video model
   */
  readonly fields: VideoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Video.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VideoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    cortes<T extends Video$cortesArgs<ExtArgs> = {}>(args?: Subset<T, Video$cortesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findMany"> | Null>
    transcricoes<T extends Video$transcricoesArgs<ExtArgs> = {}>(args?: Subset<T, Video$transcricoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findMany"> | Null>
    momentos<T extends Video$momentosArgs<ExtArgs> = {}>(args?: Subset<T, Video$momentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Video model
   */ 
  interface VideoFieldRefs {
    readonly id: FieldRef<"Video", 'Int'>
    readonly nome: FieldRef<"Video", 'String'>
    readonly caminho: FieldRef<"Video", 'String'>
    readonly largura: FieldRef<"Video", 'Int'>
    readonly altura: FieldRef<"Video", 'Int'>
    readonly duracao: FieldRef<"Video", 'Float'>
    readonly status: FieldRef<"Video", 'String'>
    readonly criadoEm: FieldRef<"Video", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Video findUnique
   */
  export type VideoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findUniqueOrThrow
   */
  export type VideoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video findFirst
   */
  export type VideoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findFirstOrThrow
   */
  export type VideoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Video to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Videos.
     */
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video findMany
   */
  export type VideoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter, which Videos to fetch.
     */
    where?: VideoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Videos to fetch.
     */
    orderBy?: VideoOrderByWithRelationInput | VideoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Videos.
     */
    cursor?: VideoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Videos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Videos.
     */
    skip?: number
    distinct?: VideoScalarFieldEnum | VideoScalarFieldEnum[]
  }

  /**
   * Video create
   */
  export type VideoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to create a Video.
     */
    data: XOR<VideoCreateInput, VideoUncheckedCreateInput>
  }

  /**
   * Video createMany
   */
  export type VideoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video createManyAndReturn
   */
  export type VideoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Videos.
     */
    data: VideoCreateManyInput | VideoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Video update
   */
  export type VideoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The data needed to update a Video.
     */
    data: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
    /**
     * Choose, which Video to update.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video updateMany
   */
  export type VideoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Videos.
     */
    data: XOR<VideoUpdateManyMutationInput, VideoUncheckedUpdateManyInput>
    /**
     * Filter which Videos to update
     */
    where?: VideoWhereInput
  }

  /**
   * Video upsert
   */
  export type VideoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * The filter to search for the Video to update in case it exists.
     */
    where: VideoWhereUniqueInput
    /**
     * In case the Video found by the `where` argument doesn't exist, create a new Video with this data.
     */
    create: XOR<VideoCreateInput, VideoUncheckedCreateInput>
    /**
     * In case the Video was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VideoUpdateInput, VideoUncheckedUpdateInput>
  }

  /**
   * Video delete
   */
  export type VideoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
    /**
     * Filter which Video to delete.
     */
    where: VideoWhereUniqueInput
  }

  /**
   * Video deleteMany
   */
  export type VideoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Videos to delete
     */
    where?: VideoWhereInput
  }

  /**
   * Video.cortes
   */
  export type Video$cortesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    where?: CorteWhereInput
    orderBy?: CorteOrderByWithRelationInput | CorteOrderByWithRelationInput[]
    cursor?: CorteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CorteScalarFieldEnum | CorteScalarFieldEnum[]
  }

  /**
   * Video.transcricoes
   */
  export type Video$transcricoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    where?: TranscricaoWhereInput
    orderBy?: TranscricaoOrderByWithRelationInput | TranscricaoOrderByWithRelationInput[]
    cursor?: TranscricaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TranscricaoScalarFieldEnum | TranscricaoScalarFieldEnum[]
  }

  /**
   * Video.momentos
   */
  export type Video$momentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    where?: MomentoWhereInput
    orderBy?: MomentoOrderByWithRelationInput | MomentoOrderByWithRelationInput[]
    cursor?: MomentoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MomentoScalarFieldEnum | MomentoScalarFieldEnum[]
  }

  /**
   * Video without action
   */
  export type VideoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Video
     */
    select?: VideoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: VideoInclude<ExtArgs> | null
  }


  /**
   * Model Momento
   */

  export type AggregateMomento = {
    _count: MomentoCountAggregateOutputType | null
    _avg: MomentoAvgAggregateOutputType | null
    _sum: MomentoSumAggregateOutputType | null
    _min: MomentoMinAggregateOutputType | null
    _max: MomentoMaxAggregateOutputType | null
  }

  export type MomentoAvgAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    score: number | null
  }

  export type MomentoSumAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    score: number | null
  }

  export type MomentoMinAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    score: number | null
    tipo: string | null
    palavras: string | null
  }

  export type MomentoMaxAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    score: number | null
    tipo: string | null
    palavras: string | null
  }

  export type MomentoCountAggregateOutputType = {
    id: number
    videoId: number
    ini: number
    fim: number
    score: number
    tipo: number
    palavras: number
    _all: number
  }


  export type MomentoAvgAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    score?: true
  }

  export type MomentoSumAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    score?: true
  }

  export type MomentoMinAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    score?: true
    tipo?: true
    palavras?: true
  }

  export type MomentoMaxAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    score?: true
    tipo?: true
    palavras?: true
  }

  export type MomentoCountAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    score?: true
    tipo?: true
    palavras?: true
    _all?: true
  }

  export type MomentoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Momento to aggregate.
     */
    where?: MomentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Momentos to fetch.
     */
    orderBy?: MomentoOrderByWithRelationInput | MomentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MomentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Momentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Momentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Momentos
    **/
    _count?: true | MomentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MomentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MomentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MomentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MomentoMaxAggregateInputType
  }

  export type GetMomentoAggregateType<T extends MomentoAggregateArgs> = {
        [P in keyof T & keyof AggregateMomento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMomento[P]>
      : GetScalarType<T[P], AggregateMomento[P]>
  }




  export type MomentoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MomentoWhereInput
    orderBy?: MomentoOrderByWithAggregationInput | MomentoOrderByWithAggregationInput[]
    by: MomentoScalarFieldEnum[] | MomentoScalarFieldEnum
    having?: MomentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MomentoCountAggregateInputType | true
    _avg?: MomentoAvgAggregateInputType
    _sum?: MomentoSumAggregateInputType
    _min?: MomentoMinAggregateInputType
    _max?: MomentoMaxAggregateInputType
  }

  export type MomentoGroupByOutputType = {
    id: number
    videoId: number
    ini: number
    fim: number
    score: number
    tipo: string
    palavras: string | null
    _count: MomentoCountAggregateOutputType | null
    _avg: MomentoAvgAggregateOutputType | null
    _sum: MomentoSumAggregateOutputType | null
    _min: MomentoMinAggregateOutputType | null
    _max: MomentoMaxAggregateOutputType | null
  }

  type GetMomentoGroupByPayload<T extends MomentoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MomentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MomentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MomentoGroupByOutputType[P]>
            : GetScalarType<T[P], MomentoGroupByOutputType[P]>
        }
      >
    >


  export type MomentoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    score?: boolean
    tipo?: boolean
    palavras?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["momento"]>

  export type MomentoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    score?: boolean
    tipo?: boolean
    palavras?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["momento"]>

  export type MomentoSelectScalar = {
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    score?: boolean
    tipo?: boolean
    palavras?: boolean
  }

  export type MomentoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type MomentoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $MomentoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Momento"
    objects: {
      Video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      videoId: number
      ini: number
      fim: number
      score: number
      tipo: string
      palavras: string | null
    }, ExtArgs["result"]["momento"]>
    composites: {}
  }

  type MomentoGetPayload<S extends boolean | null | undefined | MomentoDefaultArgs> = $Result.GetResult<Prisma.$MomentoPayload, S>

  type MomentoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MomentoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MomentoCountAggregateInputType | true
    }

  export interface MomentoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Momento'], meta: { name: 'Momento' } }
    /**
     * Find zero or one Momento that matches the filter.
     * @param {MomentoFindUniqueArgs} args - Arguments to find a Momento
     * @example
     * // Get one Momento
     * const momento = await prisma.momento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MomentoFindUniqueArgs>(args: SelectSubset<T, MomentoFindUniqueArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Momento that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MomentoFindUniqueOrThrowArgs} args - Arguments to find a Momento
     * @example
     * // Get one Momento
     * const momento = await prisma.momento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MomentoFindUniqueOrThrowArgs>(args: SelectSubset<T, MomentoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Momento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoFindFirstArgs} args - Arguments to find a Momento
     * @example
     * // Get one Momento
     * const momento = await prisma.momento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MomentoFindFirstArgs>(args?: SelectSubset<T, MomentoFindFirstArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Momento that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoFindFirstOrThrowArgs} args - Arguments to find a Momento
     * @example
     * // Get one Momento
     * const momento = await prisma.momento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MomentoFindFirstOrThrowArgs>(args?: SelectSubset<T, MomentoFindFirstOrThrowArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Momentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Momentos
     * const momentos = await prisma.momento.findMany()
     * 
     * // Get first 10 Momentos
     * const momentos = await prisma.momento.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const momentoWithIdOnly = await prisma.momento.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MomentoFindManyArgs>(args?: SelectSubset<T, MomentoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Momento.
     * @param {MomentoCreateArgs} args - Arguments to create a Momento.
     * @example
     * // Create one Momento
     * const Momento = await prisma.momento.create({
     *   data: {
     *     // ... data to create a Momento
     *   }
     * })
     * 
     */
    create<T extends MomentoCreateArgs>(args: SelectSubset<T, MomentoCreateArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Momentos.
     * @param {MomentoCreateManyArgs} args - Arguments to create many Momentos.
     * @example
     * // Create many Momentos
     * const momento = await prisma.momento.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MomentoCreateManyArgs>(args?: SelectSubset<T, MomentoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Momentos and returns the data saved in the database.
     * @param {MomentoCreateManyAndReturnArgs} args - Arguments to create many Momentos.
     * @example
     * // Create many Momentos
     * const momento = await prisma.momento.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Momentos and only return the `id`
     * const momentoWithIdOnly = await prisma.momento.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MomentoCreateManyAndReturnArgs>(args?: SelectSubset<T, MomentoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Momento.
     * @param {MomentoDeleteArgs} args - Arguments to delete one Momento.
     * @example
     * // Delete one Momento
     * const Momento = await prisma.momento.delete({
     *   where: {
     *     // ... filter to delete one Momento
     *   }
     * })
     * 
     */
    delete<T extends MomentoDeleteArgs>(args: SelectSubset<T, MomentoDeleteArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Momento.
     * @param {MomentoUpdateArgs} args - Arguments to update one Momento.
     * @example
     * // Update one Momento
     * const momento = await prisma.momento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MomentoUpdateArgs>(args: SelectSubset<T, MomentoUpdateArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Momentos.
     * @param {MomentoDeleteManyArgs} args - Arguments to filter Momentos to delete.
     * @example
     * // Delete a few Momentos
     * const { count } = await prisma.momento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MomentoDeleteManyArgs>(args?: SelectSubset<T, MomentoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Momentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Momentos
     * const momento = await prisma.momento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MomentoUpdateManyArgs>(args: SelectSubset<T, MomentoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Momento.
     * @param {MomentoUpsertArgs} args - Arguments to update or create a Momento.
     * @example
     * // Update or create a Momento
     * const momento = await prisma.momento.upsert({
     *   create: {
     *     // ... data to create a Momento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Momento we want to update
     *   }
     * })
     */
    upsert<T extends MomentoUpsertArgs>(args: SelectSubset<T, MomentoUpsertArgs<ExtArgs>>): Prisma__MomentoClient<$Result.GetResult<Prisma.$MomentoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Momentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoCountArgs} args - Arguments to filter Momentos to count.
     * @example
     * // Count the number of Momentos
     * const count = await prisma.momento.count({
     *   where: {
     *     // ... the filter for the Momentos we want to count
     *   }
     * })
    **/
    count<T extends MomentoCountArgs>(
      args?: Subset<T, MomentoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MomentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Momento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MomentoAggregateArgs>(args: Subset<T, MomentoAggregateArgs>): Prisma.PrismaPromise<GetMomentoAggregateType<T>>

    /**
     * Group by Momento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MomentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MomentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MomentoGroupByArgs['orderBy'] }
        : { orderBy?: MomentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MomentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMomentoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Momento model
   */
  readonly fields: MomentoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Momento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MomentoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Momento model
   */ 
  interface MomentoFieldRefs {
    readonly id: FieldRef<"Momento", 'Int'>
    readonly videoId: FieldRef<"Momento", 'Int'>
    readonly ini: FieldRef<"Momento", 'Float'>
    readonly fim: FieldRef<"Momento", 'Float'>
    readonly score: FieldRef<"Momento", 'Float'>
    readonly tipo: FieldRef<"Momento", 'String'>
    readonly palavras: FieldRef<"Momento", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Momento findUnique
   */
  export type MomentoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter, which Momento to fetch.
     */
    where: MomentoWhereUniqueInput
  }

  /**
   * Momento findUniqueOrThrow
   */
  export type MomentoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter, which Momento to fetch.
     */
    where: MomentoWhereUniqueInput
  }

  /**
   * Momento findFirst
   */
  export type MomentoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter, which Momento to fetch.
     */
    where?: MomentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Momentos to fetch.
     */
    orderBy?: MomentoOrderByWithRelationInput | MomentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Momentos.
     */
    cursor?: MomentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Momentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Momentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Momentos.
     */
    distinct?: MomentoScalarFieldEnum | MomentoScalarFieldEnum[]
  }

  /**
   * Momento findFirstOrThrow
   */
  export type MomentoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter, which Momento to fetch.
     */
    where?: MomentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Momentos to fetch.
     */
    orderBy?: MomentoOrderByWithRelationInput | MomentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Momentos.
     */
    cursor?: MomentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Momentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Momentos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Momentos.
     */
    distinct?: MomentoScalarFieldEnum | MomentoScalarFieldEnum[]
  }

  /**
   * Momento findMany
   */
  export type MomentoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter, which Momentos to fetch.
     */
    where?: MomentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Momentos to fetch.
     */
    orderBy?: MomentoOrderByWithRelationInput | MomentoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Momentos.
     */
    cursor?: MomentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Momentos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Momentos.
     */
    skip?: number
    distinct?: MomentoScalarFieldEnum | MomentoScalarFieldEnum[]
  }

  /**
   * Momento create
   */
  export type MomentoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * The data needed to create a Momento.
     */
    data: XOR<MomentoCreateInput, MomentoUncheckedCreateInput>
  }

  /**
   * Momento createMany
   */
  export type MomentoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Momentos.
     */
    data: MomentoCreateManyInput | MomentoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Momento createManyAndReturn
   */
  export type MomentoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Momentos.
     */
    data: MomentoCreateManyInput | MomentoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Momento update
   */
  export type MomentoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * The data needed to update a Momento.
     */
    data: XOR<MomentoUpdateInput, MomentoUncheckedUpdateInput>
    /**
     * Choose, which Momento to update.
     */
    where: MomentoWhereUniqueInput
  }

  /**
   * Momento updateMany
   */
  export type MomentoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Momentos.
     */
    data: XOR<MomentoUpdateManyMutationInput, MomentoUncheckedUpdateManyInput>
    /**
     * Filter which Momentos to update
     */
    where?: MomentoWhereInput
  }

  /**
   * Momento upsert
   */
  export type MomentoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * The filter to search for the Momento to update in case it exists.
     */
    where: MomentoWhereUniqueInput
    /**
     * In case the Momento found by the `where` argument doesn't exist, create a new Momento with this data.
     */
    create: XOR<MomentoCreateInput, MomentoUncheckedCreateInput>
    /**
     * In case the Momento was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MomentoUpdateInput, MomentoUncheckedUpdateInput>
  }

  /**
   * Momento delete
   */
  export type MomentoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
    /**
     * Filter which Momento to delete.
     */
    where: MomentoWhereUniqueInput
  }

  /**
   * Momento deleteMany
   */
  export type MomentoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Momentos to delete
     */
    where?: MomentoWhereInput
  }

  /**
   * Momento without action
   */
  export type MomentoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Momento
     */
    select?: MomentoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MomentoInclude<ExtArgs> | null
  }


  /**
   * Model Corte
   */

  export type AggregateCorte = {
    _count: CorteCountAggregateOutputType | null
    _avg: CorteAvgAggregateOutputType | null
    _sum: CorteSumAggregateOutputType | null
    _min: CorteMinAggregateOutputType | null
    _max: CorteMaxAggregateOutputType | null
  }

  export type CorteAvgAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
  }

  export type CorteSumAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
  }

  export type CorteMinAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    preset: string | null
    legendaOn: boolean | null
    overlayOn: boolean | null
    seed: string | null
    status: string | null
    saida: string | null
  }

  export type CorteMaxAggregateOutputType = {
    id: number | null
    videoId: number | null
    ini: number | null
    fim: number | null
    preset: string | null
    legendaOn: boolean | null
    overlayOn: boolean | null
    seed: string | null
    status: string | null
    saida: string | null
  }

  export type CorteCountAggregateOutputType = {
    id: number
    videoId: number
    ini: number
    fim: number
    preset: number
    legendaOn: number
    overlayOn: number
    seed: number
    parametrosUnicidade: number
    status: number
    saida: number
    _all: number
  }


  export type CorteAvgAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
  }

  export type CorteSumAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
  }

  export type CorteMinAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    preset?: true
    legendaOn?: true
    overlayOn?: true
    seed?: true
    status?: true
    saida?: true
  }

  export type CorteMaxAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    preset?: true
    legendaOn?: true
    overlayOn?: true
    seed?: true
    status?: true
    saida?: true
  }

  export type CorteCountAggregateInputType = {
    id?: true
    videoId?: true
    ini?: true
    fim?: true
    preset?: true
    legendaOn?: true
    overlayOn?: true
    seed?: true
    parametrosUnicidade?: true
    status?: true
    saida?: true
    _all?: true
  }

  export type CorteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Corte to aggregate.
     */
    where?: CorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cortes to fetch.
     */
    orderBy?: CorteOrderByWithRelationInput | CorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Cortes
    **/
    _count?: true | CorteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CorteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CorteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CorteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CorteMaxAggregateInputType
  }

  export type GetCorteAggregateType<T extends CorteAggregateArgs> = {
        [P in keyof T & keyof AggregateCorte]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCorte[P]>
      : GetScalarType<T[P], AggregateCorte[P]>
  }




  export type CorteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CorteWhereInput
    orderBy?: CorteOrderByWithAggregationInput | CorteOrderByWithAggregationInput[]
    by: CorteScalarFieldEnum[] | CorteScalarFieldEnum
    having?: CorteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CorteCountAggregateInputType | true
    _avg?: CorteAvgAggregateInputType
    _sum?: CorteSumAggregateInputType
    _min?: CorteMinAggregateInputType
    _max?: CorteMaxAggregateInputType
  }

  export type CorteGroupByOutputType = {
    id: number
    videoId: number
    ini: number
    fim: number
    preset: string
    legendaOn: boolean
    overlayOn: boolean
    seed: string | null
    parametrosUnicidade: JsonValue | null
    status: string
    saida: string | null
    _count: CorteCountAggregateOutputType | null
    _avg: CorteAvgAggregateOutputType | null
    _sum: CorteSumAggregateOutputType | null
    _min: CorteMinAggregateOutputType | null
    _max: CorteMaxAggregateOutputType | null
  }

  type GetCorteGroupByPayload<T extends CorteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CorteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CorteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CorteGroupByOutputType[P]>
            : GetScalarType<T[P], CorteGroupByOutputType[P]>
        }
      >
    >


  export type CorteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    preset?: boolean
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: boolean
    parametrosUnicidade?: boolean
    status?: boolean
    saida?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
    renders?: boolean | Corte$rendersArgs<ExtArgs>
    publicacoes?: boolean | Corte$publicacoesArgs<ExtArgs>
    _count?: boolean | CorteCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corte"]>

  export type CorteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    preset?: boolean
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: boolean
    parametrosUnicidade?: boolean
    status?: boolean
    saida?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["corte"]>

  export type CorteSelectScalar = {
    id?: boolean
    videoId?: boolean
    ini?: boolean
    fim?: boolean
    preset?: boolean
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: boolean
    parametrosUnicidade?: boolean
    status?: boolean
    saida?: boolean
  }

  export type CorteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
    renders?: boolean | Corte$rendersArgs<ExtArgs>
    publicacoes?: boolean | Corte$publicacoesArgs<ExtArgs>
    _count?: boolean | CorteCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CorteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $CortePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Corte"
    objects: {
      Video: Prisma.$VideoPayload<ExtArgs>
      renders: Prisma.$RenderPayload<ExtArgs>[]
      publicacoes: Prisma.$PublicacaoPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      videoId: number
      ini: number
      fim: number
      preset: string
      legendaOn: boolean
      overlayOn: boolean
      seed: string | null
      parametrosUnicidade: Prisma.JsonValue | null
      status: string
      saida: string | null
    }, ExtArgs["result"]["corte"]>
    composites: {}
  }

  type CorteGetPayload<S extends boolean | null | undefined | CorteDefaultArgs> = $Result.GetResult<Prisma.$CortePayload, S>

  type CorteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CorteFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CorteCountAggregateInputType | true
    }

  export interface CorteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Corte'], meta: { name: 'Corte' } }
    /**
     * Find zero or one Corte that matches the filter.
     * @param {CorteFindUniqueArgs} args - Arguments to find a Corte
     * @example
     * // Get one Corte
     * const corte = await prisma.corte.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CorteFindUniqueArgs>(args: SelectSubset<T, CorteFindUniqueArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Corte that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CorteFindUniqueOrThrowArgs} args - Arguments to find a Corte
     * @example
     * // Get one Corte
     * const corte = await prisma.corte.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CorteFindUniqueOrThrowArgs>(args: SelectSubset<T, CorteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Corte that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteFindFirstArgs} args - Arguments to find a Corte
     * @example
     * // Get one Corte
     * const corte = await prisma.corte.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CorteFindFirstArgs>(args?: SelectSubset<T, CorteFindFirstArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Corte that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteFindFirstOrThrowArgs} args - Arguments to find a Corte
     * @example
     * // Get one Corte
     * const corte = await prisma.corte.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CorteFindFirstOrThrowArgs>(args?: SelectSubset<T, CorteFindFirstOrThrowArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Cortes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Cortes
     * const cortes = await prisma.corte.findMany()
     * 
     * // Get first 10 Cortes
     * const cortes = await prisma.corte.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const corteWithIdOnly = await prisma.corte.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CorteFindManyArgs>(args?: SelectSubset<T, CorteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Corte.
     * @param {CorteCreateArgs} args - Arguments to create a Corte.
     * @example
     * // Create one Corte
     * const Corte = await prisma.corte.create({
     *   data: {
     *     // ... data to create a Corte
     *   }
     * })
     * 
     */
    create<T extends CorteCreateArgs>(args: SelectSubset<T, CorteCreateArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Cortes.
     * @param {CorteCreateManyArgs} args - Arguments to create many Cortes.
     * @example
     * // Create many Cortes
     * const corte = await prisma.corte.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CorteCreateManyArgs>(args?: SelectSubset<T, CorteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Cortes and returns the data saved in the database.
     * @param {CorteCreateManyAndReturnArgs} args - Arguments to create many Cortes.
     * @example
     * // Create many Cortes
     * const corte = await prisma.corte.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Cortes and only return the `id`
     * const corteWithIdOnly = await prisma.corte.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CorteCreateManyAndReturnArgs>(args?: SelectSubset<T, CorteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Corte.
     * @param {CorteDeleteArgs} args - Arguments to delete one Corte.
     * @example
     * // Delete one Corte
     * const Corte = await prisma.corte.delete({
     *   where: {
     *     // ... filter to delete one Corte
     *   }
     * })
     * 
     */
    delete<T extends CorteDeleteArgs>(args: SelectSubset<T, CorteDeleteArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Corte.
     * @param {CorteUpdateArgs} args - Arguments to update one Corte.
     * @example
     * // Update one Corte
     * const corte = await prisma.corte.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CorteUpdateArgs>(args: SelectSubset<T, CorteUpdateArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Cortes.
     * @param {CorteDeleteManyArgs} args - Arguments to filter Cortes to delete.
     * @example
     * // Delete a few Cortes
     * const { count } = await prisma.corte.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CorteDeleteManyArgs>(args?: SelectSubset<T, CorteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Cortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Cortes
     * const corte = await prisma.corte.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CorteUpdateManyArgs>(args: SelectSubset<T, CorteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Corte.
     * @param {CorteUpsertArgs} args - Arguments to update or create a Corte.
     * @example
     * // Update or create a Corte
     * const corte = await prisma.corte.upsert({
     *   create: {
     *     // ... data to create a Corte
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Corte we want to update
     *   }
     * })
     */
    upsert<T extends CorteUpsertArgs>(args: SelectSubset<T, CorteUpsertArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Cortes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteCountArgs} args - Arguments to filter Cortes to count.
     * @example
     * // Count the number of Cortes
     * const count = await prisma.corte.count({
     *   where: {
     *     // ... the filter for the Cortes we want to count
     *   }
     * })
    **/
    count<T extends CorteCountArgs>(
      args?: Subset<T, CorteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CorteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Corte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CorteAggregateArgs>(args: Subset<T, CorteAggregateArgs>): Prisma.PrismaPromise<GetCorteAggregateType<T>>

    /**
     * Group by Corte.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CorteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CorteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CorteGroupByArgs['orderBy'] }
        : { orderBy?: CorteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CorteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCorteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Corte model
   */
  readonly fields: CorteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Corte.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CorteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    renders<T extends Corte$rendersArgs<ExtArgs> = {}>(args?: Subset<T, Corte$rendersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findMany"> | Null>
    publicacoes<T extends Corte$publicacoesArgs<ExtArgs> = {}>(args?: Subset<T, Corte$publicacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Corte model
   */ 
  interface CorteFieldRefs {
    readonly id: FieldRef<"Corte", 'Int'>
    readonly videoId: FieldRef<"Corte", 'Int'>
    readonly ini: FieldRef<"Corte", 'Float'>
    readonly fim: FieldRef<"Corte", 'Float'>
    readonly preset: FieldRef<"Corte", 'String'>
    readonly legendaOn: FieldRef<"Corte", 'Boolean'>
    readonly overlayOn: FieldRef<"Corte", 'Boolean'>
    readonly seed: FieldRef<"Corte", 'String'>
    readonly parametrosUnicidade: FieldRef<"Corte", 'Json'>
    readonly status: FieldRef<"Corte", 'String'>
    readonly saida: FieldRef<"Corte", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Corte findUnique
   */
  export type CorteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter, which Corte to fetch.
     */
    where: CorteWhereUniqueInput
  }

  /**
   * Corte findUniqueOrThrow
   */
  export type CorteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter, which Corte to fetch.
     */
    where: CorteWhereUniqueInput
  }

  /**
   * Corte findFirst
   */
  export type CorteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter, which Corte to fetch.
     */
    where?: CorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cortes to fetch.
     */
    orderBy?: CorteOrderByWithRelationInput | CorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cortes.
     */
    cursor?: CorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cortes.
     */
    distinct?: CorteScalarFieldEnum | CorteScalarFieldEnum[]
  }

  /**
   * Corte findFirstOrThrow
   */
  export type CorteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter, which Corte to fetch.
     */
    where?: CorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cortes to fetch.
     */
    orderBy?: CorteOrderByWithRelationInput | CorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Cortes.
     */
    cursor?: CorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cortes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Cortes.
     */
    distinct?: CorteScalarFieldEnum | CorteScalarFieldEnum[]
  }

  /**
   * Corte findMany
   */
  export type CorteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter, which Cortes to fetch.
     */
    where?: CorteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Cortes to fetch.
     */
    orderBy?: CorteOrderByWithRelationInput | CorteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Cortes.
     */
    cursor?: CorteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Cortes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Cortes.
     */
    skip?: number
    distinct?: CorteScalarFieldEnum | CorteScalarFieldEnum[]
  }

  /**
   * Corte create
   */
  export type CorteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * The data needed to create a Corte.
     */
    data: XOR<CorteCreateInput, CorteUncheckedCreateInput>
  }

  /**
   * Corte createMany
   */
  export type CorteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Cortes.
     */
    data: CorteCreateManyInput | CorteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Corte createManyAndReturn
   */
  export type CorteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Cortes.
     */
    data: CorteCreateManyInput | CorteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Corte update
   */
  export type CorteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * The data needed to update a Corte.
     */
    data: XOR<CorteUpdateInput, CorteUncheckedUpdateInput>
    /**
     * Choose, which Corte to update.
     */
    where: CorteWhereUniqueInput
  }

  /**
   * Corte updateMany
   */
  export type CorteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Cortes.
     */
    data: XOR<CorteUpdateManyMutationInput, CorteUncheckedUpdateManyInput>
    /**
     * Filter which Cortes to update
     */
    where?: CorteWhereInput
  }

  /**
   * Corte upsert
   */
  export type CorteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * The filter to search for the Corte to update in case it exists.
     */
    where: CorteWhereUniqueInput
    /**
     * In case the Corte found by the `where` argument doesn't exist, create a new Corte with this data.
     */
    create: XOR<CorteCreateInput, CorteUncheckedCreateInput>
    /**
     * In case the Corte was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CorteUpdateInput, CorteUncheckedUpdateInput>
  }

  /**
   * Corte delete
   */
  export type CorteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
    /**
     * Filter which Corte to delete.
     */
    where: CorteWhereUniqueInput
  }

  /**
   * Corte deleteMany
   */
  export type CorteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Cortes to delete
     */
    where?: CorteWhereInput
  }

  /**
   * Corte.renders
   */
  export type Corte$rendersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    where?: RenderWhereInput
    orderBy?: RenderOrderByWithRelationInput | RenderOrderByWithRelationInput[]
    cursor?: RenderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RenderScalarFieldEnum | RenderScalarFieldEnum[]
  }

  /**
   * Corte.publicacoes
   */
  export type Corte$publicacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    where?: PublicacaoWhereInput
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    cursor?: PublicacaoWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Corte without action
   */
  export type CorteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Corte
     */
    select?: CorteSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CorteInclude<ExtArgs> | null
  }


  /**
   * Model Render
   */

  export type AggregateRender = {
    _count: RenderCountAggregateOutputType | null
    _avg: RenderAvgAggregateOutputType | null
    _sum: RenderSumAggregateOutputType | null
    _min: RenderMinAggregateOutputType | null
    _max: RenderMaxAggregateOutputType | null
  }

  export type RenderAvgAggregateOutputType = {
    id: number | null
    corteId: number | null
  }

  export type RenderSumAggregateOutputType = {
    id: number | null
    corteId: number | null
  }

  export type RenderMinAggregateOutputType = {
    id: number | null
    corteId: number | null
    arquivo: string | null
    hashPerceptual: string | null
    status: string | null
    log: string | null
  }

  export type RenderMaxAggregateOutputType = {
    id: number | null
    corteId: number | null
    arquivo: string | null
    hashPerceptual: string | null
    status: string | null
    log: string | null
  }

  export type RenderCountAggregateOutputType = {
    id: number
    corteId: number
    arquivo: number
    hashPerceptual: number
    status: number
    log: number
    _all: number
  }


  export type RenderAvgAggregateInputType = {
    id?: true
    corteId?: true
  }

  export type RenderSumAggregateInputType = {
    id?: true
    corteId?: true
  }

  export type RenderMinAggregateInputType = {
    id?: true
    corteId?: true
    arquivo?: true
    hashPerceptual?: true
    status?: true
    log?: true
  }

  export type RenderMaxAggregateInputType = {
    id?: true
    corteId?: true
    arquivo?: true
    hashPerceptual?: true
    status?: true
    log?: true
  }

  export type RenderCountAggregateInputType = {
    id?: true
    corteId?: true
    arquivo?: true
    hashPerceptual?: true
    status?: true
    log?: true
    _all?: true
  }

  export type RenderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Render to aggregate.
     */
    where?: RenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renders to fetch.
     */
    orderBy?: RenderOrderByWithRelationInput | RenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Renders
    **/
    _count?: true | RenderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RenderAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RenderSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RenderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RenderMaxAggregateInputType
  }

  export type GetRenderAggregateType<T extends RenderAggregateArgs> = {
        [P in keyof T & keyof AggregateRender]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRender[P]>
      : GetScalarType<T[P], AggregateRender[P]>
  }




  export type RenderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RenderWhereInput
    orderBy?: RenderOrderByWithAggregationInput | RenderOrderByWithAggregationInput[]
    by: RenderScalarFieldEnum[] | RenderScalarFieldEnum
    having?: RenderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RenderCountAggregateInputType | true
    _avg?: RenderAvgAggregateInputType
    _sum?: RenderSumAggregateInputType
    _min?: RenderMinAggregateInputType
    _max?: RenderMaxAggregateInputType
  }

  export type RenderGroupByOutputType = {
    id: number
    corteId: number
    arquivo: string | null
    hashPerceptual: string | null
    status: string
    log: string | null
    _count: RenderCountAggregateOutputType | null
    _avg: RenderAvgAggregateOutputType | null
    _sum: RenderSumAggregateOutputType | null
    _min: RenderMinAggregateOutputType | null
    _max: RenderMaxAggregateOutputType | null
  }

  type GetRenderGroupByPayload<T extends RenderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RenderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RenderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RenderGroupByOutputType[P]>
            : GetScalarType<T[P], RenderGroupByOutputType[P]>
        }
      >
    >


  export type RenderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corteId?: boolean
    arquivo?: boolean
    hashPerceptual?: boolean
    status?: boolean
    log?: boolean
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["render"]>

  export type RenderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corteId?: boolean
    arquivo?: boolean
    hashPerceptual?: boolean
    status?: boolean
    log?: boolean
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["render"]>

  export type RenderSelectScalar = {
    id?: boolean
    corteId?: boolean
    arquivo?: boolean
    hashPerceptual?: boolean
    status?: boolean
    log?: boolean
  }

  export type RenderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }
  export type RenderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }

  export type $RenderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Render"
    objects: {
      Corte: Prisma.$CortePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      corteId: number
      arquivo: string | null
      hashPerceptual: string | null
      status: string
      log: string | null
    }, ExtArgs["result"]["render"]>
    composites: {}
  }

  type RenderGetPayload<S extends boolean | null | undefined | RenderDefaultArgs> = $Result.GetResult<Prisma.$RenderPayload, S>

  type RenderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RenderFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RenderCountAggregateInputType | true
    }

  export interface RenderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Render'], meta: { name: 'Render' } }
    /**
     * Find zero or one Render that matches the filter.
     * @param {RenderFindUniqueArgs} args - Arguments to find a Render
     * @example
     * // Get one Render
     * const render = await prisma.render.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RenderFindUniqueArgs>(args: SelectSubset<T, RenderFindUniqueArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Render that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RenderFindUniqueOrThrowArgs} args - Arguments to find a Render
     * @example
     * // Get one Render
     * const render = await prisma.render.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RenderFindUniqueOrThrowArgs>(args: SelectSubset<T, RenderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Render that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderFindFirstArgs} args - Arguments to find a Render
     * @example
     * // Get one Render
     * const render = await prisma.render.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RenderFindFirstArgs>(args?: SelectSubset<T, RenderFindFirstArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Render that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderFindFirstOrThrowArgs} args - Arguments to find a Render
     * @example
     * // Get one Render
     * const render = await prisma.render.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RenderFindFirstOrThrowArgs>(args?: SelectSubset<T, RenderFindFirstOrThrowArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Renders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Renders
     * const renders = await prisma.render.findMany()
     * 
     * // Get first 10 Renders
     * const renders = await prisma.render.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const renderWithIdOnly = await prisma.render.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RenderFindManyArgs>(args?: SelectSubset<T, RenderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Render.
     * @param {RenderCreateArgs} args - Arguments to create a Render.
     * @example
     * // Create one Render
     * const Render = await prisma.render.create({
     *   data: {
     *     // ... data to create a Render
     *   }
     * })
     * 
     */
    create<T extends RenderCreateArgs>(args: SelectSubset<T, RenderCreateArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Renders.
     * @param {RenderCreateManyArgs} args - Arguments to create many Renders.
     * @example
     * // Create many Renders
     * const render = await prisma.render.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RenderCreateManyArgs>(args?: SelectSubset<T, RenderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Renders and returns the data saved in the database.
     * @param {RenderCreateManyAndReturnArgs} args - Arguments to create many Renders.
     * @example
     * // Create many Renders
     * const render = await prisma.render.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Renders and only return the `id`
     * const renderWithIdOnly = await prisma.render.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RenderCreateManyAndReturnArgs>(args?: SelectSubset<T, RenderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Render.
     * @param {RenderDeleteArgs} args - Arguments to delete one Render.
     * @example
     * // Delete one Render
     * const Render = await prisma.render.delete({
     *   where: {
     *     // ... filter to delete one Render
     *   }
     * })
     * 
     */
    delete<T extends RenderDeleteArgs>(args: SelectSubset<T, RenderDeleteArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Render.
     * @param {RenderUpdateArgs} args - Arguments to update one Render.
     * @example
     * // Update one Render
     * const render = await prisma.render.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RenderUpdateArgs>(args: SelectSubset<T, RenderUpdateArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Renders.
     * @param {RenderDeleteManyArgs} args - Arguments to filter Renders to delete.
     * @example
     * // Delete a few Renders
     * const { count } = await prisma.render.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RenderDeleteManyArgs>(args?: SelectSubset<T, RenderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Renders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Renders
     * const render = await prisma.render.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RenderUpdateManyArgs>(args: SelectSubset<T, RenderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Render.
     * @param {RenderUpsertArgs} args - Arguments to update or create a Render.
     * @example
     * // Update or create a Render
     * const render = await prisma.render.upsert({
     *   create: {
     *     // ... data to create a Render
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Render we want to update
     *   }
     * })
     */
    upsert<T extends RenderUpsertArgs>(args: SelectSubset<T, RenderUpsertArgs<ExtArgs>>): Prisma__RenderClient<$Result.GetResult<Prisma.$RenderPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Renders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderCountArgs} args - Arguments to filter Renders to count.
     * @example
     * // Count the number of Renders
     * const count = await prisma.render.count({
     *   where: {
     *     // ... the filter for the Renders we want to count
     *   }
     * })
    **/
    count<T extends RenderCountArgs>(
      args?: Subset<T, RenderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RenderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Render.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RenderAggregateArgs>(args: Subset<T, RenderAggregateArgs>): Prisma.PrismaPromise<GetRenderAggregateType<T>>

    /**
     * Group by Render.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RenderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RenderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RenderGroupByArgs['orderBy'] }
        : { orderBy?: RenderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RenderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRenderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Render model
   */
  readonly fields: RenderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Render.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RenderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Corte<T extends CorteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorteDefaultArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Render model
   */ 
  interface RenderFieldRefs {
    readonly id: FieldRef<"Render", 'Int'>
    readonly corteId: FieldRef<"Render", 'Int'>
    readonly arquivo: FieldRef<"Render", 'String'>
    readonly hashPerceptual: FieldRef<"Render", 'String'>
    readonly status: FieldRef<"Render", 'String'>
    readonly log: FieldRef<"Render", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Render findUnique
   */
  export type RenderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter, which Render to fetch.
     */
    where: RenderWhereUniqueInput
  }

  /**
   * Render findUniqueOrThrow
   */
  export type RenderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter, which Render to fetch.
     */
    where: RenderWhereUniqueInput
  }

  /**
   * Render findFirst
   */
  export type RenderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter, which Render to fetch.
     */
    where?: RenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renders to fetch.
     */
    orderBy?: RenderOrderByWithRelationInput | RenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renders.
     */
    cursor?: RenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renders.
     */
    distinct?: RenderScalarFieldEnum | RenderScalarFieldEnum[]
  }

  /**
   * Render findFirstOrThrow
   */
  export type RenderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter, which Render to fetch.
     */
    where?: RenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renders to fetch.
     */
    orderBy?: RenderOrderByWithRelationInput | RenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Renders.
     */
    cursor?: RenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Renders.
     */
    distinct?: RenderScalarFieldEnum | RenderScalarFieldEnum[]
  }

  /**
   * Render findMany
   */
  export type RenderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter, which Renders to fetch.
     */
    where?: RenderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Renders to fetch.
     */
    orderBy?: RenderOrderByWithRelationInput | RenderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Renders.
     */
    cursor?: RenderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Renders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Renders.
     */
    skip?: number
    distinct?: RenderScalarFieldEnum | RenderScalarFieldEnum[]
  }

  /**
   * Render create
   */
  export type RenderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * The data needed to create a Render.
     */
    data: XOR<RenderCreateInput, RenderUncheckedCreateInput>
  }

  /**
   * Render createMany
   */
  export type RenderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Renders.
     */
    data: RenderCreateManyInput | RenderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Render createManyAndReturn
   */
  export type RenderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Renders.
     */
    data: RenderCreateManyInput | RenderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Render update
   */
  export type RenderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * The data needed to update a Render.
     */
    data: XOR<RenderUpdateInput, RenderUncheckedUpdateInput>
    /**
     * Choose, which Render to update.
     */
    where: RenderWhereUniqueInput
  }

  /**
   * Render updateMany
   */
  export type RenderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Renders.
     */
    data: XOR<RenderUpdateManyMutationInput, RenderUncheckedUpdateManyInput>
    /**
     * Filter which Renders to update
     */
    where?: RenderWhereInput
  }

  /**
   * Render upsert
   */
  export type RenderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * The filter to search for the Render to update in case it exists.
     */
    where: RenderWhereUniqueInput
    /**
     * In case the Render found by the `where` argument doesn't exist, create a new Render with this data.
     */
    create: XOR<RenderCreateInput, RenderUncheckedCreateInput>
    /**
     * In case the Render was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RenderUpdateInput, RenderUncheckedUpdateInput>
  }

  /**
   * Render delete
   */
  export type RenderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
    /**
     * Filter which Render to delete.
     */
    where: RenderWhereUniqueInput
  }

  /**
   * Render deleteMany
   */
  export type RenderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Renders to delete
     */
    where?: RenderWhereInput
  }

  /**
   * Render without action
   */
  export type RenderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Render
     */
    select?: RenderSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RenderInclude<ExtArgs> | null
  }


  /**
   * Model Publicacao
   */

  export type AggregatePublicacao = {
    _count: PublicacaoCountAggregateOutputType | null
    _avg: PublicacaoAvgAggregateOutputType | null
    _sum: PublicacaoSumAggregateOutputType | null
    _min: PublicacaoMinAggregateOutputType | null
    _max: PublicacaoMaxAggregateOutputType | null
  }

  export type PublicacaoAvgAggregateOutputType = {
    id: number | null
    corteId: number | null
  }

  export type PublicacaoSumAggregateOutputType = {
    id: number | null
    corteId: number | null
  }

  export type PublicacaoMinAggregateOutputType = {
    id: number | null
    corteId: number | null
    rede: string | null
    status: string | null
    url: string | null
  }

  export type PublicacaoMaxAggregateOutputType = {
    id: number | null
    corteId: number | null
    rede: string | null
    status: string | null
    url: string | null
  }

  export type PublicacaoCountAggregateOutputType = {
    id: number
    corteId: number
    rede: number
    status: number
    url: number
    _all: number
  }


  export type PublicacaoAvgAggregateInputType = {
    id?: true
    corteId?: true
  }

  export type PublicacaoSumAggregateInputType = {
    id?: true
    corteId?: true
  }

  export type PublicacaoMinAggregateInputType = {
    id?: true
    corteId?: true
    rede?: true
    status?: true
    url?: true
  }

  export type PublicacaoMaxAggregateInputType = {
    id?: true
    corteId?: true
    rede?: true
    status?: true
    url?: true
  }

  export type PublicacaoCountAggregateInputType = {
    id?: true
    corteId?: true
    rede?: true
    status?: true
    url?: true
    _all?: true
  }

  export type PublicacaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacao to aggregate.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Publicacaos
    **/
    _count?: true | PublicacaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PublicacaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PublicacaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PublicacaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PublicacaoMaxAggregateInputType
  }

  export type GetPublicacaoAggregateType<T extends PublicacaoAggregateArgs> = {
        [P in keyof T & keyof AggregatePublicacao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePublicacao[P]>
      : GetScalarType<T[P], AggregatePublicacao[P]>
  }




  export type PublicacaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PublicacaoWhereInput
    orderBy?: PublicacaoOrderByWithAggregationInput | PublicacaoOrderByWithAggregationInput[]
    by: PublicacaoScalarFieldEnum[] | PublicacaoScalarFieldEnum
    having?: PublicacaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PublicacaoCountAggregateInputType | true
    _avg?: PublicacaoAvgAggregateInputType
    _sum?: PublicacaoSumAggregateInputType
    _min?: PublicacaoMinAggregateInputType
    _max?: PublicacaoMaxAggregateInputType
  }

  export type PublicacaoGroupByOutputType = {
    id: number
    corteId: number
    rede: string
    status: string
    url: string | null
    _count: PublicacaoCountAggregateOutputType | null
    _avg: PublicacaoAvgAggregateOutputType | null
    _sum: PublicacaoSumAggregateOutputType | null
    _min: PublicacaoMinAggregateOutputType | null
    _max: PublicacaoMaxAggregateOutputType | null
  }

  type GetPublicacaoGroupByPayload<T extends PublicacaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PublicacaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PublicacaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PublicacaoGroupByOutputType[P]>
            : GetScalarType<T[P], PublicacaoGroupByOutputType[P]>
        }
      >
    >


  export type PublicacaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corteId?: boolean
    rede?: boolean
    status?: boolean
    url?: boolean
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacao"]>

  export type PublicacaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    corteId?: boolean
    rede?: boolean
    status?: boolean
    url?: boolean
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["publicacao"]>

  export type PublicacaoSelectScalar = {
    id?: boolean
    corteId?: boolean
    rede?: boolean
    status?: boolean
    url?: boolean
  }

  export type PublicacaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }
  export type PublicacaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Corte?: boolean | CorteDefaultArgs<ExtArgs>
  }

  export type $PublicacaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Publicacao"
    objects: {
      Corte: Prisma.$CortePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      corteId: number
      rede: string
      status: string
      url: string | null
    }, ExtArgs["result"]["publicacao"]>
    composites: {}
  }

  type PublicacaoGetPayload<S extends boolean | null | undefined | PublicacaoDefaultArgs> = $Result.GetResult<Prisma.$PublicacaoPayload, S>

  type PublicacaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PublicacaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PublicacaoCountAggregateInputType | true
    }

  export interface PublicacaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Publicacao'], meta: { name: 'Publicacao' } }
    /**
     * Find zero or one Publicacao that matches the filter.
     * @param {PublicacaoFindUniqueArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PublicacaoFindUniqueArgs>(args: SelectSubset<T, PublicacaoFindUniqueArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Publicacao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PublicacaoFindUniqueOrThrowArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PublicacaoFindUniqueOrThrowArgs>(args: SelectSubset<T, PublicacaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Publicacao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindFirstArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PublicacaoFindFirstArgs>(args?: SelectSubset<T, PublicacaoFindFirstArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Publicacao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindFirstOrThrowArgs} args - Arguments to find a Publicacao
     * @example
     * // Get one Publicacao
     * const publicacao = await prisma.publicacao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PublicacaoFindFirstOrThrowArgs>(args?: SelectSubset<T, PublicacaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Publicacaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Publicacaos
     * const publicacaos = await prisma.publicacao.findMany()
     * 
     * // Get first 10 Publicacaos
     * const publicacaos = await prisma.publicacao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const publicacaoWithIdOnly = await prisma.publicacao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PublicacaoFindManyArgs>(args?: SelectSubset<T, PublicacaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Publicacao.
     * @param {PublicacaoCreateArgs} args - Arguments to create a Publicacao.
     * @example
     * // Create one Publicacao
     * const Publicacao = await prisma.publicacao.create({
     *   data: {
     *     // ... data to create a Publicacao
     *   }
     * })
     * 
     */
    create<T extends PublicacaoCreateArgs>(args: SelectSubset<T, PublicacaoCreateArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Publicacaos.
     * @param {PublicacaoCreateManyArgs} args - Arguments to create many Publicacaos.
     * @example
     * // Create many Publicacaos
     * const publicacao = await prisma.publicacao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PublicacaoCreateManyArgs>(args?: SelectSubset<T, PublicacaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Publicacaos and returns the data saved in the database.
     * @param {PublicacaoCreateManyAndReturnArgs} args - Arguments to create many Publicacaos.
     * @example
     * // Create many Publicacaos
     * const publicacao = await prisma.publicacao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Publicacaos and only return the `id`
     * const publicacaoWithIdOnly = await prisma.publicacao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PublicacaoCreateManyAndReturnArgs>(args?: SelectSubset<T, PublicacaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Publicacao.
     * @param {PublicacaoDeleteArgs} args - Arguments to delete one Publicacao.
     * @example
     * // Delete one Publicacao
     * const Publicacao = await prisma.publicacao.delete({
     *   where: {
     *     // ... filter to delete one Publicacao
     *   }
     * })
     * 
     */
    delete<T extends PublicacaoDeleteArgs>(args: SelectSubset<T, PublicacaoDeleteArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Publicacao.
     * @param {PublicacaoUpdateArgs} args - Arguments to update one Publicacao.
     * @example
     * // Update one Publicacao
     * const publicacao = await prisma.publicacao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PublicacaoUpdateArgs>(args: SelectSubset<T, PublicacaoUpdateArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Publicacaos.
     * @param {PublicacaoDeleteManyArgs} args - Arguments to filter Publicacaos to delete.
     * @example
     * // Delete a few Publicacaos
     * const { count } = await prisma.publicacao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PublicacaoDeleteManyArgs>(args?: SelectSubset<T, PublicacaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Publicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Publicacaos
     * const publicacao = await prisma.publicacao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PublicacaoUpdateManyArgs>(args: SelectSubset<T, PublicacaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Publicacao.
     * @param {PublicacaoUpsertArgs} args - Arguments to update or create a Publicacao.
     * @example
     * // Update or create a Publicacao
     * const publicacao = await prisma.publicacao.upsert({
     *   create: {
     *     // ... data to create a Publicacao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Publicacao we want to update
     *   }
     * })
     */
    upsert<T extends PublicacaoUpsertArgs>(args: SelectSubset<T, PublicacaoUpsertArgs<ExtArgs>>): Prisma__PublicacaoClient<$Result.GetResult<Prisma.$PublicacaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Publicacaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoCountArgs} args - Arguments to filter Publicacaos to count.
     * @example
     * // Count the number of Publicacaos
     * const count = await prisma.publicacao.count({
     *   where: {
     *     // ... the filter for the Publicacaos we want to count
     *   }
     * })
    **/
    count<T extends PublicacaoCountArgs>(
      args?: Subset<T, PublicacaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PublicacaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Publicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PublicacaoAggregateArgs>(args: Subset<T, PublicacaoAggregateArgs>): Prisma.PrismaPromise<GetPublicacaoAggregateType<T>>

    /**
     * Group by Publicacao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PublicacaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PublicacaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PublicacaoGroupByArgs['orderBy'] }
        : { orderBy?: PublicacaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PublicacaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPublicacaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Publicacao model
   */
  readonly fields: PublicacaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Publicacao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PublicacaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Corte<T extends CorteDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CorteDefaultArgs<ExtArgs>>): Prisma__CorteClient<$Result.GetResult<Prisma.$CortePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Publicacao model
   */ 
  interface PublicacaoFieldRefs {
    readonly id: FieldRef<"Publicacao", 'Int'>
    readonly corteId: FieldRef<"Publicacao", 'Int'>
    readonly rede: FieldRef<"Publicacao", 'String'>
    readonly status: FieldRef<"Publicacao", 'String'>
    readonly url: FieldRef<"Publicacao", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Publicacao findUnique
   */
  export type PublicacaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao findUniqueOrThrow
   */
  export type PublicacaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao findFirst
   */
  export type PublicacaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacaos.
     */
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao findFirstOrThrow
   */
  export type PublicacaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacao to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Publicacaos.
     */
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao findMany
   */
  export type PublicacaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter, which Publicacaos to fetch.
     */
    where?: PublicacaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Publicacaos to fetch.
     */
    orderBy?: PublicacaoOrderByWithRelationInput | PublicacaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Publicacaos.
     */
    cursor?: PublicacaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Publicacaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Publicacaos.
     */
    skip?: number
    distinct?: PublicacaoScalarFieldEnum | PublicacaoScalarFieldEnum[]
  }

  /**
   * Publicacao create
   */
  export type PublicacaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Publicacao.
     */
    data: XOR<PublicacaoCreateInput, PublicacaoUncheckedCreateInput>
  }

  /**
   * Publicacao createMany
   */
  export type PublicacaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Publicacaos.
     */
    data: PublicacaoCreateManyInput | PublicacaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Publicacao createManyAndReturn
   */
  export type PublicacaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Publicacaos.
     */
    data: PublicacaoCreateManyInput | PublicacaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Publicacao update
   */
  export type PublicacaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Publicacao.
     */
    data: XOR<PublicacaoUpdateInput, PublicacaoUncheckedUpdateInput>
    /**
     * Choose, which Publicacao to update.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao updateMany
   */
  export type PublicacaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Publicacaos.
     */
    data: XOR<PublicacaoUpdateManyMutationInput, PublicacaoUncheckedUpdateManyInput>
    /**
     * Filter which Publicacaos to update
     */
    where?: PublicacaoWhereInput
  }

  /**
   * Publicacao upsert
   */
  export type PublicacaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Publicacao to update in case it exists.
     */
    where: PublicacaoWhereUniqueInput
    /**
     * In case the Publicacao found by the `where` argument doesn't exist, create a new Publicacao with this data.
     */
    create: XOR<PublicacaoCreateInput, PublicacaoUncheckedCreateInput>
    /**
     * In case the Publicacao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PublicacaoUpdateInput, PublicacaoUncheckedUpdateInput>
  }

  /**
   * Publicacao delete
   */
  export type PublicacaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
    /**
     * Filter which Publicacao to delete.
     */
    where: PublicacaoWhereUniqueInput
  }

  /**
   * Publicacao deleteMany
   */
  export type PublicacaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Publicacaos to delete
     */
    where?: PublicacaoWhereInput
  }

  /**
   * Publicacao without action
   */
  export type PublicacaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Publicacao
     */
    select?: PublicacaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PublicacaoInclude<ExtArgs> | null
  }


  /**
   * Model Job
   */

  export type AggregateJob = {
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  export type JobAvgAggregateOutputType = {
    id: number | null
    refId: number | null
    progresso: number | null
  }

  export type JobSumAggregateOutputType = {
    id: number | null
    refId: number | null
    progresso: number | null
  }

  export type JobMinAggregateOutputType = {
    id: number | null
    tipo: string | null
    refId: number | null
    status: string | null
    progresso: number | null
    log: string | null
    criadoEm: Date | null
    atualizadoEm: Date | null
  }

  export type JobMaxAggregateOutputType = {
    id: number | null
    tipo: string | null
    refId: number | null
    status: string | null
    progresso: number | null
    log: string | null
    criadoEm: Date | null
    atualizadoEm: Date | null
  }

  export type JobCountAggregateOutputType = {
    id: number
    tipo: number
    refId: number
    status: number
    progresso: number
    log: number
    criadoEm: number
    atualizadoEm: number
    _all: number
  }


  export type JobAvgAggregateInputType = {
    id?: true
    refId?: true
    progresso?: true
  }

  export type JobSumAggregateInputType = {
    id?: true
    refId?: true
    progresso?: true
  }

  export type JobMinAggregateInputType = {
    id?: true
    tipo?: true
    refId?: true
    status?: true
    progresso?: true
    log?: true
    criadoEm?: true
    atualizadoEm?: true
  }

  export type JobMaxAggregateInputType = {
    id?: true
    tipo?: true
    refId?: true
    status?: true
    progresso?: true
    log?: true
    criadoEm?: true
    atualizadoEm?: true
  }

  export type JobCountAggregateInputType = {
    id?: true
    tipo?: true
    refId?: true
    status?: true
    progresso?: true
    log?: true
    criadoEm?: true
    atualizadoEm?: true
    _all?: true
  }

  export type JobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Job to aggregate.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Jobs
    **/
    _count?: true | JobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobMaxAggregateInputType
  }

  export type GetJobAggregateType<T extends JobAggregateArgs> = {
        [P in keyof T & keyof AggregateJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJob[P]>
      : GetScalarType<T[P], AggregateJob[P]>
  }




  export type JobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JobWhereInput
    orderBy?: JobOrderByWithAggregationInput | JobOrderByWithAggregationInput[]
    by: JobScalarFieldEnum[] | JobScalarFieldEnum
    having?: JobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobCountAggregateInputType | true
    _avg?: JobAvgAggregateInputType
    _sum?: JobSumAggregateInputType
    _min?: JobMinAggregateInputType
    _max?: JobMaxAggregateInputType
  }

  export type JobGroupByOutputType = {
    id: number
    tipo: string
    refId: number | null
    status: string
    progresso: number
    log: string | null
    criadoEm: Date
    atualizadoEm: Date
    _count: JobCountAggregateOutputType | null
    _avg: JobAvgAggregateOutputType | null
    _sum: JobSumAggregateOutputType | null
    _min: JobMinAggregateOutputType | null
    _max: JobMaxAggregateOutputType | null
  }

  type GetJobGroupByPayload<T extends JobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobGroupByOutputType[P]>
            : GetScalarType<T[P], JobGroupByOutputType[P]>
        }
      >
    >


  export type JobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    refId?: boolean
    status?: boolean
    progresso?: boolean
    log?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tipo?: boolean
    refId?: boolean
    status?: boolean
    progresso?: boolean
    log?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
  }, ExtArgs["result"]["job"]>

  export type JobSelectScalar = {
    id?: boolean
    tipo?: boolean
    refId?: boolean
    status?: boolean
    progresso?: boolean
    log?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
  }


  export type $JobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Job"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      tipo: string
      refId: number | null
      status: string
      progresso: number
      log: string | null
      criadoEm: Date
      atualizadoEm: Date
    }, ExtArgs["result"]["job"]>
    composites: {}
  }

  type JobGetPayload<S extends boolean | null | undefined | JobDefaultArgs> = $Result.GetResult<Prisma.$JobPayload, S>

  type JobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<JobFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: JobCountAggregateInputType | true
    }

  export interface JobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Job'], meta: { name: 'Job' } }
    /**
     * Find zero or one Job that matches the filter.
     * @param {JobFindUniqueArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JobFindUniqueArgs>(args: SelectSubset<T, JobFindUniqueArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Job that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {JobFindUniqueOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JobFindUniqueOrThrowArgs>(args: SelectSubset<T, JobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Job that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JobFindFirstArgs>(args?: SelectSubset<T, JobFindFirstArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Job that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindFirstOrThrowArgs} args - Arguments to find a Job
     * @example
     * // Get one Job
     * const job = await prisma.job.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JobFindFirstOrThrowArgs>(args?: SelectSubset<T, JobFindFirstOrThrowArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.job.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.job.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const jobWithIdOnly = await prisma.job.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JobFindManyArgs>(args?: SelectSubset<T, JobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Job.
     * @param {JobCreateArgs} args - Arguments to create a Job.
     * @example
     * // Create one Job
     * const Job = await prisma.job.create({
     *   data: {
     *     // ... data to create a Job
     *   }
     * })
     * 
     */
    create<T extends JobCreateArgs>(args: SelectSubset<T, JobCreateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Jobs.
     * @param {JobCreateManyArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JobCreateManyArgs>(args?: SelectSubset<T, JobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Jobs and returns the data saved in the database.
     * @param {JobCreateManyAndReturnArgs} args - Arguments to create many Jobs.
     * @example
     * // Create many Jobs
     * const job = await prisma.job.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Jobs and only return the `id`
     * const jobWithIdOnly = await prisma.job.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JobCreateManyAndReturnArgs>(args?: SelectSubset<T, JobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Job.
     * @param {JobDeleteArgs} args - Arguments to delete one Job.
     * @example
     * // Delete one Job
     * const Job = await prisma.job.delete({
     *   where: {
     *     // ... filter to delete one Job
     *   }
     * })
     * 
     */
    delete<T extends JobDeleteArgs>(args: SelectSubset<T, JobDeleteArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Job.
     * @param {JobUpdateArgs} args - Arguments to update one Job.
     * @example
     * // Update one Job
     * const job = await prisma.job.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JobUpdateArgs>(args: SelectSubset<T, JobUpdateArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Jobs.
     * @param {JobDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.job.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JobDeleteManyArgs>(args?: SelectSubset<T, JobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const job = await prisma.job.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JobUpdateManyArgs>(args: SelectSubset<T, JobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Job.
     * @param {JobUpsertArgs} args - Arguments to update or create a Job.
     * @example
     * // Update or create a Job
     * const job = await prisma.job.upsert({
     *   create: {
     *     // ... data to create a Job
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Job we want to update
     *   }
     * })
     */
    upsert<T extends JobUpsertArgs>(args: SelectSubset<T, JobUpsertArgs<ExtArgs>>): Prisma__JobClient<$Result.GetResult<Prisma.$JobPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.job.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends JobCountArgs>(
      args?: Subset<T, JobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobAggregateArgs>(args: Subset<T, JobAggregateArgs>): Prisma.PrismaPromise<GetJobAggregateType<T>>

    /**
     * Group by Job.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobGroupByArgs['orderBy'] }
        : { orderBy?: JobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Job model
   */
  readonly fields: JobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Job.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Job model
   */ 
  interface JobFieldRefs {
    readonly id: FieldRef<"Job", 'Int'>
    readonly tipo: FieldRef<"Job", 'String'>
    readonly refId: FieldRef<"Job", 'Int'>
    readonly status: FieldRef<"Job", 'String'>
    readonly progresso: FieldRef<"Job", 'Int'>
    readonly log: FieldRef<"Job", 'String'>
    readonly criadoEm: FieldRef<"Job", 'DateTime'>
    readonly atualizadoEm: FieldRef<"Job", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Job findUnique
   */
  export type JobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findUniqueOrThrow
   */
  export type JobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job findFirst
   */
  export type JobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findFirstOrThrow
   */
  export type JobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Job to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Jobs.
     */
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job findMany
   */
  export type JobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter, which Jobs to fetch.
     */
    where?: JobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Jobs to fetch.
     */
    orderBy?: JobOrderByWithRelationInput | JobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Jobs.
     */
    cursor?: JobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Jobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Jobs.
     */
    skip?: number
    distinct?: JobScalarFieldEnum | JobScalarFieldEnum[]
  }

  /**
   * Job create
   */
  export type JobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to create a Job.
     */
    data: XOR<JobCreateInput, JobUncheckedCreateInput>
  }

  /**
   * Job createMany
   */
  export type JobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job createManyAndReturn
   */
  export type JobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Jobs.
     */
    data: JobCreateManyInput | JobCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Job update
   */
  export type JobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The data needed to update a Job.
     */
    data: XOR<JobUpdateInput, JobUncheckedUpdateInput>
    /**
     * Choose, which Job to update.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job updateMany
   */
  export type JobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Jobs.
     */
    data: XOR<JobUpdateManyMutationInput, JobUncheckedUpdateManyInput>
    /**
     * Filter which Jobs to update
     */
    where?: JobWhereInput
  }

  /**
   * Job upsert
   */
  export type JobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * The filter to search for the Job to update in case it exists.
     */
    where: JobWhereUniqueInput
    /**
     * In case the Job found by the `where` argument doesn't exist, create a new Job with this data.
     */
    create: XOR<JobCreateInput, JobUncheckedCreateInput>
    /**
     * In case the Job was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JobUpdateInput, JobUncheckedUpdateInput>
  }

  /**
   * Job delete
   */
  export type JobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
    /**
     * Filter which Job to delete.
     */
    where: JobWhereUniqueInput
  }

  /**
   * Job deleteMany
   */
  export type JobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Jobs to delete
     */
    where?: JobWhereInput
  }

  /**
   * Job without action
   */
  export type JobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Job
     */
    select?: JobSelect<ExtArgs> | null
  }


  /**
   * Model Transcricao
   */

  export type AggregateTranscricao = {
    _count: TranscricaoCountAggregateOutputType | null
    _avg: TranscricaoAvgAggregateOutputType | null
    _sum: TranscricaoSumAggregateOutputType | null
    _min: TranscricaoMinAggregateOutputType | null
    _max: TranscricaoMaxAggregateOutputType | null
  }

  export type TranscricaoAvgAggregateOutputType = {
    id: number | null
    videoId: number | null
  }

  export type TranscricaoSumAggregateOutputType = {
    id: number | null
    videoId: number | null
  }

  export type TranscricaoMinAggregateOutputType = {
    id: number | null
    videoId: number | null
    texto: string | null
  }

  export type TranscricaoMaxAggregateOutputType = {
    id: number | null
    videoId: number | null
    texto: string | null
  }

  export type TranscricaoCountAggregateOutputType = {
    id: number
    videoId: number
    texto: number
    trechos: number
    _all: number
  }


  export type TranscricaoAvgAggregateInputType = {
    id?: true
    videoId?: true
  }

  export type TranscricaoSumAggregateInputType = {
    id?: true
    videoId?: true
  }

  export type TranscricaoMinAggregateInputType = {
    id?: true
    videoId?: true
    texto?: true
  }

  export type TranscricaoMaxAggregateInputType = {
    id?: true
    videoId?: true
    texto?: true
  }

  export type TranscricaoCountAggregateInputType = {
    id?: true
    videoId?: true
    texto?: true
    trechos?: true
    _all?: true
  }

  export type TranscricaoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transcricao to aggregate.
     */
    where?: TranscricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcricaos to fetch.
     */
    orderBy?: TranscricaoOrderByWithRelationInput | TranscricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TranscricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transcricaos
    **/
    _count?: true | TranscricaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TranscricaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TranscricaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TranscricaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TranscricaoMaxAggregateInputType
  }

  export type GetTranscricaoAggregateType<T extends TranscricaoAggregateArgs> = {
        [P in keyof T & keyof AggregateTranscricao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTranscricao[P]>
      : GetScalarType<T[P], AggregateTranscricao[P]>
  }




  export type TranscricaoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TranscricaoWhereInput
    orderBy?: TranscricaoOrderByWithAggregationInput | TranscricaoOrderByWithAggregationInput[]
    by: TranscricaoScalarFieldEnum[] | TranscricaoScalarFieldEnum
    having?: TranscricaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TranscricaoCountAggregateInputType | true
    _avg?: TranscricaoAvgAggregateInputType
    _sum?: TranscricaoSumAggregateInputType
    _min?: TranscricaoMinAggregateInputType
    _max?: TranscricaoMaxAggregateInputType
  }

  export type TranscricaoGroupByOutputType = {
    id: number
    videoId: number
    texto: string
    trechos: JsonValue | null
    _count: TranscricaoCountAggregateOutputType | null
    _avg: TranscricaoAvgAggregateOutputType | null
    _sum: TranscricaoSumAggregateOutputType | null
    _min: TranscricaoMinAggregateOutputType | null
    _max: TranscricaoMaxAggregateOutputType | null
  }

  type GetTranscricaoGroupByPayload<T extends TranscricaoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TranscricaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TranscricaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TranscricaoGroupByOutputType[P]>
            : GetScalarType<T[P], TranscricaoGroupByOutputType[P]>
        }
      >
    >


  export type TranscricaoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    texto?: boolean
    trechos?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transcricao"]>

  export type TranscricaoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    videoId?: boolean
    texto?: boolean
    trechos?: boolean
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transcricao"]>

  export type TranscricaoSelectScalar = {
    id?: boolean
    videoId?: boolean
    texto?: boolean
    trechos?: boolean
  }

  export type TranscricaoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }
  export type TranscricaoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Video?: boolean | VideoDefaultArgs<ExtArgs>
  }

  export type $TranscricaoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transcricao"
    objects: {
      Video: Prisma.$VideoPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      videoId: number
      texto: string
      trechos: Prisma.JsonValue | null
    }, ExtArgs["result"]["transcricao"]>
    composites: {}
  }

  type TranscricaoGetPayload<S extends boolean | null | undefined | TranscricaoDefaultArgs> = $Result.GetResult<Prisma.$TranscricaoPayload, S>

  type TranscricaoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TranscricaoFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TranscricaoCountAggregateInputType | true
    }

  export interface TranscricaoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transcricao'], meta: { name: 'Transcricao' } }
    /**
     * Find zero or one Transcricao that matches the filter.
     * @param {TranscricaoFindUniqueArgs} args - Arguments to find a Transcricao
     * @example
     * // Get one Transcricao
     * const transcricao = await prisma.transcricao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TranscricaoFindUniqueArgs>(args: SelectSubset<T, TranscricaoFindUniqueArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transcricao that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TranscricaoFindUniqueOrThrowArgs} args - Arguments to find a Transcricao
     * @example
     * // Get one Transcricao
     * const transcricao = await prisma.transcricao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TranscricaoFindUniqueOrThrowArgs>(args: SelectSubset<T, TranscricaoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transcricao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoFindFirstArgs} args - Arguments to find a Transcricao
     * @example
     * // Get one Transcricao
     * const transcricao = await prisma.transcricao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TranscricaoFindFirstArgs>(args?: SelectSubset<T, TranscricaoFindFirstArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transcricao that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoFindFirstOrThrowArgs} args - Arguments to find a Transcricao
     * @example
     * // Get one Transcricao
     * const transcricao = await prisma.transcricao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TranscricaoFindFirstOrThrowArgs>(args?: SelectSubset<T, TranscricaoFindFirstOrThrowArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transcricaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transcricaos
     * const transcricaos = await prisma.transcricao.findMany()
     * 
     * // Get first 10 Transcricaos
     * const transcricaos = await prisma.transcricao.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transcricaoWithIdOnly = await prisma.transcricao.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TranscricaoFindManyArgs>(args?: SelectSubset<T, TranscricaoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transcricao.
     * @param {TranscricaoCreateArgs} args - Arguments to create a Transcricao.
     * @example
     * // Create one Transcricao
     * const Transcricao = await prisma.transcricao.create({
     *   data: {
     *     // ... data to create a Transcricao
     *   }
     * })
     * 
     */
    create<T extends TranscricaoCreateArgs>(args: SelectSubset<T, TranscricaoCreateArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transcricaos.
     * @param {TranscricaoCreateManyArgs} args - Arguments to create many Transcricaos.
     * @example
     * // Create many Transcricaos
     * const transcricao = await prisma.transcricao.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TranscricaoCreateManyArgs>(args?: SelectSubset<T, TranscricaoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transcricaos and returns the data saved in the database.
     * @param {TranscricaoCreateManyAndReturnArgs} args - Arguments to create many Transcricaos.
     * @example
     * // Create many Transcricaos
     * const transcricao = await prisma.transcricao.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transcricaos and only return the `id`
     * const transcricaoWithIdOnly = await prisma.transcricao.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TranscricaoCreateManyAndReturnArgs>(args?: SelectSubset<T, TranscricaoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transcricao.
     * @param {TranscricaoDeleteArgs} args - Arguments to delete one Transcricao.
     * @example
     * // Delete one Transcricao
     * const Transcricao = await prisma.transcricao.delete({
     *   where: {
     *     // ... filter to delete one Transcricao
     *   }
     * })
     * 
     */
    delete<T extends TranscricaoDeleteArgs>(args: SelectSubset<T, TranscricaoDeleteArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transcricao.
     * @param {TranscricaoUpdateArgs} args - Arguments to update one Transcricao.
     * @example
     * // Update one Transcricao
     * const transcricao = await prisma.transcricao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TranscricaoUpdateArgs>(args: SelectSubset<T, TranscricaoUpdateArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transcricaos.
     * @param {TranscricaoDeleteManyArgs} args - Arguments to filter Transcricaos to delete.
     * @example
     * // Delete a few Transcricaos
     * const { count } = await prisma.transcricao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TranscricaoDeleteManyArgs>(args?: SelectSubset<T, TranscricaoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transcricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transcricaos
     * const transcricao = await prisma.transcricao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TranscricaoUpdateManyArgs>(args: SelectSubset<T, TranscricaoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transcricao.
     * @param {TranscricaoUpsertArgs} args - Arguments to update or create a Transcricao.
     * @example
     * // Update or create a Transcricao
     * const transcricao = await prisma.transcricao.upsert({
     *   create: {
     *     // ... data to create a Transcricao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transcricao we want to update
     *   }
     * })
     */
    upsert<T extends TranscricaoUpsertArgs>(args: SelectSubset<T, TranscricaoUpsertArgs<ExtArgs>>): Prisma__TranscricaoClient<$Result.GetResult<Prisma.$TranscricaoPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transcricaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoCountArgs} args - Arguments to filter Transcricaos to count.
     * @example
     * // Count the number of Transcricaos
     * const count = await prisma.transcricao.count({
     *   where: {
     *     // ... the filter for the Transcricaos we want to count
     *   }
     * })
    **/
    count<T extends TranscricaoCountArgs>(
      args?: Subset<T, TranscricaoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TranscricaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transcricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TranscricaoAggregateArgs>(args: Subset<T, TranscricaoAggregateArgs>): Prisma.PrismaPromise<GetTranscricaoAggregateType<T>>

    /**
     * Group by Transcricao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TranscricaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TranscricaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TranscricaoGroupByArgs['orderBy'] }
        : { orderBy?: TranscricaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TranscricaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTranscricaoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transcricao model
   */
  readonly fields: TranscricaoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transcricao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TranscricaoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Video<T extends VideoDefaultArgs<ExtArgs> = {}>(args?: Subset<T, VideoDefaultArgs<ExtArgs>>): Prisma__VideoClient<$Result.GetResult<Prisma.$VideoPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transcricao model
   */ 
  interface TranscricaoFieldRefs {
    readonly id: FieldRef<"Transcricao", 'Int'>
    readonly videoId: FieldRef<"Transcricao", 'Int'>
    readonly texto: FieldRef<"Transcricao", 'String'>
    readonly trechos: FieldRef<"Transcricao", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * Transcricao findUnique
   */
  export type TranscricaoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter, which Transcricao to fetch.
     */
    where: TranscricaoWhereUniqueInput
  }

  /**
   * Transcricao findUniqueOrThrow
   */
  export type TranscricaoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter, which Transcricao to fetch.
     */
    where: TranscricaoWhereUniqueInput
  }

  /**
   * Transcricao findFirst
   */
  export type TranscricaoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter, which Transcricao to fetch.
     */
    where?: TranscricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcricaos to fetch.
     */
    orderBy?: TranscricaoOrderByWithRelationInput | TranscricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transcricaos.
     */
    cursor?: TranscricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transcricaos.
     */
    distinct?: TranscricaoScalarFieldEnum | TranscricaoScalarFieldEnum[]
  }

  /**
   * Transcricao findFirstOrThrow
   */
  export type TranscricaoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter, which Transcricao to fetch.
     */
    where?: TranscricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcricaos to fetch.
     */
    orderBy?: TranscricaoOrderByWithRelationInput | TranscricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transcricaos.
     */
    cursor?: TranscricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcricaos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transcricaos.
     */
    distinct?: TranscricaoScalarFieldEnum | TranscricaoScalarFieldEnum[]
  }

  /**
   * Transcricao findMany
   */
  export type TranscricaoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter, which Transcricaos to fetch.
     */
    where?: TranscricaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transcricaos to fetch.
     */
    orderBy?: TranscricaoOrderByWithRelationInput | TranscricaoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transcricaos.
     */
    cursor?: TranscricaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transcricaos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transcricaos.
     */
    skip?: number
    distinct?: TranscricaoScalarFieldEnum | TranscricaoScalarFieldEnum[]
  }

  /**
   * Transcricao create
   */
  export type TranscricaoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * The data needed to create a Transcricao.
     */
    data: XOR<TranscricaoCreateInput, TranscricaoUncheckedCreateInput>
  }

  /**
   * Transcricao createMany
   */
  export type TranscricaoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transcricaos.
     */
    data: TranscricaoCreateManyInput | TranscricaoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transcricao createManyAndReturn
   */
  export type TranscricaoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Transcricaos.
     */
    data: TranscricaoCreateManyInput | TranscricaoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transcricao update
   */
  export type TranscricaoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * The data needed to update a Transcricao.
     */
    data: XOR<TranscricaoUpdateInput, TranscricaoUncheckedUpdateInput>
    /**
     * Choose, which Transcricao to update.
     */
    where: TranscricaoWhereUniqueInput
  }

  /**
   * Transcricao updateMany
   */
  export type TranscricaoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transcricaos.
     */
    data: XOR<TranscricaoUpdateManyMutationInput, TranscricaoUncheckedUpdateManyInput>
    /**
     * Filter which Transcricaos to update
     */
    where?: TranscricaoWhereInput
  }

  /**
   * Transcricao upsert
   */
  export type TranscricaoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * The filter to search for the Transcricao to update in case it exists.
     */
    where: TranscricaoWhereUniqueInput
    /**
     * In case the Transcricao found by the `where` argument doesn't exist, create a new Transcricao with this data.
     */
    create: XOR<TranscricaoCreateInput, TranscricaoUncheckedCreateInput>
    /**
     * In case the Transcricao was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TranscricaoUpdateInput, TranscricaoUncheckedUpdateInput>
  }

  /**
   * Transcricao delete
   */
  export type TranscricaoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
    /**
     * Filter which Transcricao to delete.
     */
    where: TranscricaoWhereUniqueInput
  }

  /**
   * Transcricao deleteMany
   */
  export type TranscricaoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transcricaos to delete
     */
    where?: TranscricaoWhereInput
  }

  /**
   * Transcricao without action
   */
  export type TranscricaoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transcricao
     */
    select?: TranscricaoSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TranscricaoInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const VideoScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    caminho: 'caminho',
    largura: 'largura',
    altura: 'altura',
    duracao: 'duracao',
    status: 'status',
    criadoEm: 'criadoEm'
  };

  export type VideoScalarFieldEnum = (typeof VideoScalarFieldEnum)[keyof typeof VideoScalarFieldEnum]


  export const MomentoScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    ini: 'ini',
    fim: 'fim',
    score: 'score',
    tipo: 'tipo',
    palavras: 'palavras'
  };

  export type MomentoScalarFieldEnum = (typeof MomentoScalarFieldEnum)[keyof typeof MomentoScalarFieldEnum]


  export const CorteScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    ini: 'ini',
    fim: 'fim',
    preset: 'preset',
    legendaOn: 'legendaOn',
    overlayOn: 'overlayOn',
    seed: 'seed',
    parametrosUnicidade: 'parametrosUnicidade',
    status: 'status',
    saida: 'saida'
  };

  export type CorteScalarFieldEnum = (typeof CorteScalarFieldEnum)[keyof typeof CorteScalarFieldEnum]


  export const RenderScalarFieldEnum: {
    id: 'id',
    corteId: 'corteId',
    arquivo: 'arquivo',
    hashPerceptual: 'hashPerceptual',
    status: 'status',
    log: 'log'
  };

  export type RenderScalarFieldEnum = (typeof RenderScalarFieldEnum)[keyof typeof RenderScalarFieldEnum]


  export const PublicacaoScalarFieldEnum: {
    id: 'id',
    corteId: 'corteId',
    rede: 'rede',
    status: 'status',
    url: 'url'
  };

  export type PublicacaoScalarFieldEnum = (typeof PublicacaoScalarFieldEnum)[keyof typeof PublicacaoScalarFieldEnum]


  export const JobScalarFieldEnum: {
    id: 'id',
    tipo: 'tipo',
    refId: 'refId',
    status: 'status',
    progresso: 'progresso',
    log: 'log',
    criadoEm: 'criadoEm',
    atualizadoEm: 'atualizadoEm'
  };

  export type JobScalarFieldEnum = (typeof JobScalarFieldEnum)[keyof typeof JobScalarFieldEnum]


  export const TranscricaoScalarFieldEnum: {
    id: 'id',
    videoId: 'videoId',
    texto: 'texto',
    trechos: 'trechos'
  };

  export type TranscricaoScalarFieldEnum = (typeof TranscricaoScalarFieldEnum)[keyof typeof TranscricaoScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type VideoWhereInput = {
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    id?: IntFilter<"Video"> | number
    nome?: StringFilter<"Video"> | string
    caminho?: StringFilter<"Video"> | string
    largura?: IntNullableFilter<"Video"> | number | null
    altura?: IntNullableFilter<"Video"> | number | null
    duracao?: FloatNullableFilter<"Video"> | number | null
    status?: StringFilter<"Video"> | string
    criadoEm?: DateTimeFilter<"Video"> | Date | string
    cortes?: CorteListRelationFilter
    transcricoes?: TranscricaoListRelationFilter
    momentos?: MomentoListRelationFilter
  }

  export type VideoOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    caminho?: SortOrder
    largura?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    duracao?: SortOrderInput | SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    cortes?: CorteOrderByRelationAggregateInput
    transcricoes?: TranscricaoOrderByRelationAggregateInput
    momentos?: MomentoOrderByRelationAggregateInput
  }

  export type VideoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: VideoWhereInput | VideoWhereInput[]
    OR?: VideoWhereInput[]
    NOT?: VideoWhereInput | VideoWhereInput[]
    nome?: StringFilter<"Video"> | string
    caminho?: StringFilter<"Video"> | string
    largura?: IntNullableFilter<"Video"> | number | null
    altura?: IntNullableFilter<"Video"> | number | null
    duracao?: FloatNullableFilter<"Video"> | number | null
    status?: StringFilter<"Video"> | string
    criadoEm?: DateTimeFilter<"Video"> | Date | string
    cortes?: CorteListRelationFilter
    transcricoes?: TranscricaoListRelationFilter
    momentos?: MomentoListRelationFilter
  }, "id">

  export type VideoOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    caminho?: SortOrder
    largura?: SortOrderInput | SortOrder
    altura?: SortOrderInput | SortOrder
    duracao?: SortOrderInput | SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
    _count?: VideoCountOrderByAggregateInput
    _avg?: VideoAvgOrderByAggregateInput
    _max?: VideoMaxOrderByAggregateInput
    _min?: VideoMinOrderByAggregateInput
    _sum?: VideoSumOrderByAggregateInput
  }

  export type VideoScalarWhereWithAggregatesInput = {
    AND?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    OR?: VideoScalarWhereWithAggregatesInput[]
    NOT?: VideoScalarWhereWithAggregatesInput | VideoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Video"> | number
    nome?: StringWithAggregatesFilter<"Video"> | string
    caminho?: StringWithAggregatesFilter<"Video"> | string
    largura?: IntNullableWithAggregatesFilter<"Video"> | number | null
    altura?: IntNullableWithAggregatesFilter<"Video"> | number | null
    duracao?: FloatNullableWithAggregatesFilter<"Video"> | number | null
    status?: StringWithAggregatesFilter<"Video"> | string
    criadoEm?: DateTimeWithAggregatesFilter<"Video"> | Date | string
  }

  export type MomentoWhereInput = {
    AND?: MomentoWhereInput | MomentoWhereInput[]
    OR?: MomentoWhereInput[]
    NOT?: MomentoWhereInput | MomentoWhereInput[]
    id?: IntFilter<"Momento"> | number
    videoId?: IntFilter<"Momento"> | number
    ini?: FloatFilter<"Momento"> | number
    fim?: FloatFilter<"Momento"> | number
    score?: FloatFilter<"Momento"> | number
    tipo?: StringFilter<"Momento"> | string
    palavras?: StringNullableFilter<"Momento"> | string | null
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
  }

  export type MomentoOrderByWithRelationInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
    tipo?: SortOrder
    palavras?: SortOrderInput | SortOrder
    Video?: VideoOrderByWithRelationInput
  }

  export type MomentoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: MomentoWhereInput | MomentoWhereInput[]
    OR?: MomentoWhereInput[]
    NOT?: MomentoWhereInput | MomentoWhereInput[]
    videoId?: IntFilter<"Momento"> | number
    ini?: FloatFilter<"Momento"> | number
    fim?: FloatFilter<"Momento"> | number
    score?: FloatFilter<"Momento"> | number
    tipo?: StringFilter<"Momento"> | string
    palavras?: StringNullableFilter<"Momento"> | string | null
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
  }, "id">

  export type MomentoOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
    tipo?: SortOrder
    palavras?: SortOrderInput | SortOrder
    _count?: MomentoCountOrderByAggregateInput
    _avg?: MomentoAvgOrderByAggregateInput
    _max?: MomentoMaxOrderByAggregateInput
    _min?: MomentoMinOrderByAggregateInput
    _sum?: MomentoSumOrderByAggregateInput
  }

  export type MomentoScalarWhereWithAggregatesInput = {
    AND?: MomentoScalarWhereWithAggregatesInput | MomentoScalarWhereWithAggregatesInput[]
    OR?: MomentoScalarWhereWithAggregatesInput[]
    NOT?: MomentoScalarWhereWithAggregatesInput | MomentoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Momento"> | number
    videoId?: IntWithAggregatesFilter<"Momento"> | number
    ini?: FloatWithAggregatesFilter<"Momento"> | number
    fim?: FloatWithAggregatesFilter<"Momento"> | number
    score?: FloatWithAggregatesFilter<"Momento"> | number
    tipo?: StringWithAggregatesFilter<"Momento"> | string
    palavras?: StringNullableWithAggregatesFilter<"Momento"> | string | null
  }

  export type CorteWhereInput = {
    AND?: CorteWhereInput | CorteWhereInput[]
    OR?: CorteWhereInput[]
    NOT?: CorteWhereInput | CorteWhereInput[]
    id?: IntFilter<"Corte"> | number
    videoId?: IntFilter<"Corte"> | number
    ini?: FloatFilter<"Corte"> | number
    fim?: FloatFilter<"Corte"> | number
    preset?: StringFilter<"Corte"> | string
    legendaOn?: BoolFilter<"Corte"> | boolean
    overlayOn?: BoolFilter<"Corte"> | boolean
    seed?: StringNullableFilter<"Corte"> | string | null
    parametrosUnicidade?: JsonNullableFilter<"Corte">
    status?: StringFilter<"Corte"> | string
    saida?: StringNullableFilter<"Corte"> | string | null
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
    renders?: RenderListRelationFilter
    publicacoes?: PublicacaoListRelationFilter
  }

  export type CorteOrderByWithRelationInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    preset?: SortOrder
    legendaOn?: SortOrder
    overlayOn?: SortOrder
    seed?: SortOrderInput | SortOrder
    parametrosUnicidade?: SortOrderInput | SortOrder
    status?: SortOrder
    saida?: SortOrderInput | SortOrder
    Video?: VideoOrderByWithRelationInput
    renders?: RenderOrderByRelationAggregateInput
    publicacoes?: PublicacaoOrderByRelationAggregateInput
  }

  export type CorteWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CorteWhereInput | CorteWhereInput[]
    OR?: CorteWhereInput[]
    NOT?: CorteWhereInput | CorteWhereInput[]
    videoId?: IntFilter<"Corte"> | number
    ini?: FloatFilter<"Corte"> | number
    fim?: FloatFilter<"Corte"> | number
    preset?: StringFilter<"Corte"> | string
    legendaOn?: BoolFilter<"Corte"> | boolean
    overlayOn?: BoolFilter<"Corte"> | boolean
    seed?: StringNullableFilter<"Corte"> | string | null
    parametrosUnicidade?: JsonNullableFilter<"Corte">
    status?: StringFilter<"Corte"> | string
    saida?: StringNullableFilter<"Corte"> | string | null
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
    renders?: RenderListRelationFilter
    publicacoes?: PublicacaoListRelationFilter
  }, "id">

  export type CorteOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    preset?: SortOrder
    legendaOn?: SortOrder
    overlayOn?: SortOrder
    seed?: SortOrderInput | SortOrder
    parametrosUnicidade?: SortOrderInput | SortOrder
    status?: SortOrder
    saida?: SortOrderInput | SortOrder
    _count?: CorteCountOrderByAggregateInput
    _avg?: CorteAvgOrderByAggregateInput
    _max?: CorteMaxOrderByAggregateInput
    _min?: CorteMinOrderByAggregateInput
    _sum?: CorteSumOrderByAggregateInput
  }

  export type CorteScalarWhereWithAggregatesInput = {
    AND?: CorteScalarWhereWithAggregatesInput | CorteScalarWhereWithAggregatesInput[]
    OR?: CorteScalarWhereWithAggregatesInput[]
    NOT?: CorteScalarWhereWithAggregatesInput | CorteScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Corte"> | number
    videoId?: IntWithAggregatesFilter<"Corte"> | number
    ini?: FloatWithAggregatesFilter<"Corte"> | number
    fim?: FloatWithAggregatesFilter<"Corte"> | number
    preset?: StringWithAggregatesFilter<"Corte"> | string
    legendaOn?: BoolWithAggregatesFilter<"Corte"> | boolean
    overlayOn?: BoolWithAggregatesFilter<"Corte"> | boolean
    seed?: StringNullableWithAggregatesFilter<"Corte"> | string | null
    parametrosUnicidade?: JsonNullableWithAggregatesFilter<"Corte">
    status?: StringWithAggregatesFilter<"Corte"> | string
    saida?: StringNullableWithAggregatesFilter<"Corte"> | string | null
  }

  export type RenderWhereInput = {
    AND?: RenderWhereInput | RenderWhereInput[]
    OR?: RenderWhereInput[]
    NOT?: RenderWhereInput | RenderWhereInput[]
    id?: IntFilter<"Render"> | number
    corteId?: IntFilter<"Render"> | number
    arquivo?: StringNullableFilter<"Render"> | string | null
    hashPerceptual?: StringNullableFilter<"Render"> | string | null
    status?: StringFilter<"Render"> | string
    log?: StringNullableFilter<"Render"> | string | null
    Corte?: XOR<CorteRelationFilter, CorteWhereInput>
  }

  export type RenderOrderByWithRelationInput = {
    id?: SortOrder
    corteId?: SortOrder
    arquivo?: SortOrderInput | SortOrder
    hashPerceptual?: SortOrderInput | SortOrder
    status?: SortOrder
    log?: SortOrderInput | SortOrder
    Corte?: CorteOrderByWithRelationInput
  }

  export type RenderWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RenderWhereInput | RenderWhereInput[]
    OR?: RenderWhereInput[]
    NOT?: RenderWhereInput | RenderWhereInput[]
    corteId?: IntFilter<"Render"> | number
    arquivo?: StringNullableFilter<"Render"> | string | null
    hashPerceptual?: StringNullableFilter<"Render"> | string | null
    status?: StringFilter<"Render"> | string
    log?: StringNullableFilter<"Render"> | string | null
    Corte?: XOR<CorteRelationFilter, CorteWhereInput>
  }, "id">

  export type RenderOrderByWithAggregationInput = {
    id?: SortOrder
    corteId?: SortOrder
    arquivo?: SortOrderInput | SortOrder
    hashPerceptual?: SortOrderInput | SortOrder
    status?: SortOrder
    log?: SortOrderInput | SortOrder
    _count?: RenderCountOrderByAggregateInput
    _avg?: RenderAvgOrderByAggregateInput
    _max?: RenderMaxOrderByAggregateInput
    _min?: RenderMinOrderByAggregateInput
    _sum?: RenderSumOrderByAggregateInput
  }

  export type RenderScalarWhereWithAggregatesInput = {
    AND?: RenderScalarWhereWithAggregatesInput | RenderScalarWhereWithAggregatesInput[]
    OR?: RenderScalarWhereWithAggregatesInput[]
    NOT?: RenderScalarWhereWithAggregatesInput | RenderScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Render"> | number
    corteId?: IntWithAggregatesFilter<"Render"> | number
    arquivo?: StringNullableWithAggregatesFilter<"Render"> | string | null
    hashPerceptual?: StringNullableWithAggregatesFilter<"Render"> | string | null
    status?: StringWithAggregatesFilter<"Render"> | string
    log?: StringNullableWithAggregatesFilter<"Render"> | string | null
  }

  export type PublicacaoWhereInput = {
    AND?: PublicacaoWhereInput | PublicacaoWhereInput[]
    OR?: PublicacaoWhereInput[]
    NOT?: PublicacaoWhereInput | PublicacaoWhereInput[]
    id?: IntFilter<"Publicacao"> | number
    corteId?: IntFilter<"Publicacao"> | number
    rede?: StringFilter<"Publicacao"> | string
    status?: StringFilter<"Publicacao"> | string
    url?: StringNullableFilter<"Publicacao"> | string | null
    Corte?: XOR<CorteRelationFilter, CorteWhereInput>
  }

  export type PublicacaoOrderByWithRelationInput = {
    id?: SortOrder
    corteId?: SortOrder
    rede?: SortOrder
    status?: SortOrder
    url?: SortOrderInput | SortOrder
    Corte?: CorteOrderByWithRelationInput
  }

  export type PublicacaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PublicacaoWhereInput | PublicacaoWhereInput[]
    OR?: PublicacaoWhereInput[]
    NOT?: PublicacaoWhereInput | PublicacaoWhereInput[]
    corteId?: IntFilter<"Publicacao"> | number
    rede?: StringFilter<"Publicacao"> | string
    status?: StringFilter<"Publicacao"> | string
    url?: StringNullableFilter<"Publicacao"> | string | null
    Corte?: XOR<CorteRelationFilter, CorteWhereInput>
  }, "id">

  export type PublicacaoOrderByWithAggregationInput = {
    id?: SortOrder
    corteId?: SortOrder
    rede?: SortOrder
    status?: SortOrder
    url?: SortOrderInput | SortOrder
    _count?: PublicacaoCountOrderByAggregateInput
    _avg?: PublicacaoAvgOrderByAggregateInput
    _max?: PublicacaoMaxOrderByAggregateInput
    _min?: PublicacaoMinOrderByAggregateInput
    _sum?: PublicacaoSumOrderByAggregateInput
  }

  export type PublicacaoScalarWhereWithAggregatesInput = {
    AND?: PublicacaoScalarWhereWithAggregatesInput | PublicacaoScalarWhereWithAggregatesInput[]
    OR?: PublicacaoScalarWhereWithAggregatesInput[]
    NOT?: PublicacaoScalarWhereWithAggregatesInput | PublicacaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Publicacao"> | number
    corteId?: IntWithAggregatesFilter<"Publicacao"> | number
    rede?: StringWithAggregatesFilter<"Publicacao"> | string
    status?: StringWithAggregatesFilter<"Publicacao"> | string
    url?: StringNullableWithAggregatesFilter<"Publicacao"> | string | null
  }

  export type JobWhereInput = {
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    id?: IntFilter<"Job"> | number
    tipo?: StringFilter<"Job"> | string
    refId?: IntNullableFilter<"Job"> | number | null
    status?: StringFilter<"Job"> | string
    progresso?: IntFilter<"Job"> | number
    log?: StringNullableFilter<"Job"> | string | null
    criadoEm?: DateTimeFilter<"Job"> | Date | string
    atualizadoEm?: DateTimeFilter<"Job"> | Date | string
  }

  export type JobOrderByWithRelationInput = {
    id?: SortOrder
    tipo?: SortOrder
    refId?: SortOrderInput | SortOrder
    status?: SortOrder
    progresso?: SortOrder
    log?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
  }

  export type JobWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: JobWhereInput | JobWhereInput[]
    OR?: JobWhereInput[]
    NOT?: JobWhereInput | JobWhereInput[]
    tipo?: StringFilter<"Job"> | string
    refId?: IntNullableFilter<"Job"> | number | null
    status?: StringFilter<"Job"> | string
    progresso?: IntFilter<"Job"> | number
    log?: StringNullableFilter<"Job"> | string | null
    criadoEm?: DateTimeFilter<"Job"> | Date | string
    atualizadoEm?: DateTimeFilter<"Job"> | Date | string
  }, "id">

  export type JobOrderByWithAggregationInput = {
    id?: SortOrder
    tipo?: SortOrder
    refId?: SortOrderInput | SortOrder
    status?: SortOrder
    progresso?: SortOrder
    log?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    _count?: JobCountOrderByAggregateInput
    _avg?: JobAvgOrderByAggregateInput
    _max?: JobMaxOrderByAggregateInput
    _min?: JobMinOrderByAggregateInput
    _sum?: JobSumOrderByAggregateInput
  }

  export type JobScalarWhereWithAggregatesInput = {
    AND?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    OR?: JobScalarWhereWithAggregatesInput[]
    NOT?: JobScalarWhereWithAggregatesInput | JobScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Job"> | number
    tipo?: StringWithAggregatesFilter<"Job"> | string
    refId?: IntNullableWithAggregatesFilter<"Job"> | number | null
    status?: StringWithAggregatesFilter<"Job"> | string
    progresso?: IntWithAggregatesFilter<"Job"> | number
    log?: StringNullableWithAggregatesFilter<"Job"> | string | null
    criadoEm?: DateTimeWithAggregatesFilter<"Job"> | Date | string
    atualizadoEm?: DateTimeWithAggregatesFilter<"Job"> | Date | string
  }

  export type TranscricaoWhereInput = {
    AND?: TranscricaoWhereInput | TranscricaoWhereInput[]
    OR?: TranscricaoWhereInput[]
    NOT?: TranscricaoWhereInput | TranscricaoWhereInput[]
    id?: IntFilter<"Transcricao"> | number
    videoId?: IntFilter<"Transcricao"> | number
    texto?: StringFilter<"Transcricao"> | string
    trechos?: JsonNullableFilter<"Transcricao">
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
  }

  export type TranscricaoOrderByWithRelationInput = {
    id?: SortOrder
    videoId?: SortOrder
    texto?: SortOrder
    trechos?: SortOrderInput | SortOrder
    Video?: VideoOrderByWithRelationInput
  }

  export type TranscricaoWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TranscricaoWhereInput | TranscricaoWhereInput[]
    OR?: TranscricaoWhereInput[]
    NOT?: TranscricaoWhereInput | TranscricaoWhereInput[]
    videoId?: IntFilter<"Transcricao"> | number
    texto?: StringFilter<"Transcricao"> | string
    trechos?: JsonNullableFilter<"Transcricao">
    Video?: XOR<VideoRelationFilter, VideoWhereInput>
  }, "id">

  export type TranscricaoOrderByWithAggregationInput = {
    id?: SortOrder
    videoId?: SortOrder
    texto?: SortOrder
    trechos?: SortOrderInput | SortOrder
    _count?: TranscricaoCountOrderByAggregateInput
    _avg?: TranscricaoAvgOrderByAggregateInput
    _max?: TranscricaoMaxOrderByAggregateInput
    _min?: TranscricaoMinOrderByAggregateInput
    _sum?: TranscricaoSumOrderByAggregateInput
  }

  export type TranscricaoScalarWhereWithAggregatesInput = {
    AND?: TranscricaoScalarWhereWithAggregatesInput | TranscricaoScalarWhereWithAggregatesInput[]
    OR?: TranscricaoScalarWhereWithAggregatesInput[]
    NOT?: TranscricaoScalarWhereWithAggregatesInput | TranscricaoScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transcricao"> | number
    videoId?: IntWithAggregatesFilter<"Transcricao"> | number
    texto?: StringWithAggregatesFilter<"Transcricao"> | string
    trechos?: JsonNullableWithAggregatesFilter<"Transcricao">
  }

  export type VideoCreateInput = {
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteCreateNestedManyWithoutVideoInput
    transcricoes?: TranscricaoCreateNestedManyWithoutVideoInput
    momentos?: MomentoCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateInput = {
    id?: number
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteUncheckedCreateNestedManyWithoutVideoInput
    transcricoes?: TranscricaoUncheckedCreateNestedManyWithoutVideoInput
    momentos?: MomentoUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUpdateManyWithoutVideoNestedInput
    transcricoes?: TranscricaoUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUncheckedUpdateManyWithoutVideoNestedInput
    transcricoes?: TranscricaoUncheckedUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateManyInput = {
    id?: number
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
  }

  export type VideoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VideoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MomentoCreateInput = {
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
    Video: VideoCreateNestedOneWithoutMomentosInput
  }

  export type MomentoUncheckedCreateInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
  }

  export type MomentoUpdateInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
    Video?: VideoUpdateOneRequiredWithoutMomentosNestedInput
  }

  export type MomentoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MomentoCreateManyInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
  }

  export type MomentoUpdateManyMutationInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MomentoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorteCreateInput = {
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    Video: VideoCreateNestedOneWithoutCortesInput
    renders?: RenderCreateNestedManyWithoutCorteInput
    publicacoes?: PublicacaoCreateNestedManyWithoutCorteInput
  }

  export type CorteUncheckedCreateInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    renders?: RenderUncheckedCreateNestedManyWithoutCorteInput
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutCorteInput
  }

  export type CorteUpdateInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    Video?: VideoUpdateOneRequiredWithoutCortesNestedInput
    renders?: RenderUpdateManyWithoutCorteNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutCorteNestedInput
  }

  export type CorteUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    renders?: RenderUncheckedUpdateManyWithoutCorteNestedInput
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutCorteNestedInput
  }

  export type CorteCreateManyInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
  }

  export type CorteUpdateManyMutationInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CorteUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderCreateInput = {
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
    Corte: CorteCreateNestedOneWithoutRendersInput
  }

  export type RenderUncheckedCreateInput = {
    id?: number
    corteId: number
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
  }

  export type RenderUpdateInput = {
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
    Corte?: CorteUpdateOneRequiredWithoutRendersNestedInput
  }

  export type RenderUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    corteId?: IntFieldUpdateOperationsInput | number
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderCreateManyInput = {
    id?: number
    corteId: number
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
  }

  export type RenderUpdateManyMutationInput = {
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    corteId?: IntFieldUpdateOperationsInput | number
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoCreateInput = {
    rede: string
    status?: string
    url?: string | null
    Corte: CorteCreateNestedOneWithoutPublicacoesInput
  }

  export type PublicacaoUncheckedCreateInput = {
    id?: number
    corteId: number
    rede: string
    status?: string
    url?: string | null
  }

  export type PublicacaoUpdateInput = {
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
    Corte?: CorteUpdateOneRequiredWithoutPublicacoesNestedInput
  }

  export type PublicacaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    corteId?: IntFieldUpdateOperationsInput | number
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoCreateManyInput = {
    id?: number
    corteId: number
    rede: string
    status?: string
    url?: string | null
  }

  export type PublicacaoUpdateManyMutationInput = {
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    corteId?: IntFieldUpdateOperationsInput | number
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type JobCreateInput = {
    tipo: string
    refId?: number | null
    status?: string
    progresso?: number
    log?: string | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type JobUncheckedCreateInput = {
    id?: number
    tipo: string
    refId?: number | null
    status?: string
    progresso?: number
    log?: string | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type JobUpdateInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    refId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    progresso?: IntFieldUpdateOperationsInput | number
    log?: NullableStringFieldUpdateOperationsInput | string | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    refId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    progresso?: IntFieldUpdateOperationsInput | number
    log?: NullableStringFieldUpdateOperationsInput | string | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobCreateManyInput = {
    id?: number
    tipo: string
    refId?: number | null
    status?: string
    progresso?: number
    log?: string | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type JobUpdateManyMutationInput = {
    tipo?: StringFieldUpdateOperationsInput | string
    refId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    progresso?: IntFieldUpdateOperationsInput | number
    log?: NullableStringFieldUpdateOperationsInput | string | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type JobUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    refId?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    progresso?: IntFieldUpdateOperationsInput | number
    log?: NullableStringFieldUpdateOperationsInput | string | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TranscricaoCreateInput = {
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
    Video: VideoCreateNestedOneWithoutTranscricoesInput
  }

  export type TranscricaoUncheckedCreateInput = {
    id?: number
    videoId: number
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUpdateInput = {
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
    Video?: VideoUpdateOneRequiredWithoutTranscricoesNestedInput
  }

  export type TranscricaoUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoCreateManyInput = {
    id?: number
    videoId: number
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUpdateManyMutationInput = {
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CorteListRelationFilter = {
    every?: CorteWhereInput
    some?: CorteWhereInput
    none?: CorteWhereInput
  }

  export type TranscricaoListRelationFilter = {
    every?: TranscricaoWhereInput
    some?: TranscricaoWhereInput
    none?: TranscricaoWhereInput
  }

  export type MomentoListRelationFilter = {
    every?: MomentoWhereInput
    some?: MomentoWhereInput
    none?: MomentoWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CorteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TranscricaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MomentoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type VideoCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    caminho?: SortOrder
    largura?: SortOrder
    altura?: SortOrder
    duracao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type VideoAvgOrderByAggregateInput = {
    id?: SortOrder
    largura?: SortOrder
    altura?: SortOrder
    duracao?: SortOrder
  }

  export type VideoMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    caminho?: SortOrder
    largura?: SortOrder
    altura?: SortOrder
    duracao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type VideoMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    caminho?: SortOrder
    largura?: SortOrder
    altura?: SortOrder
    duracao?: SortOrder
    status?: SortOrder
    criadoEm?: SortOrder
  }

  export type VideoSumOrderByAggregateInput = {
    id?: SortOrder
    largura?: SortOrder
    altura?: SortOrder
    duracao?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type VideoRelationFilter = {
    is?: VideoWhereInput
    isNot?: VideoWhereInput
  }

  export type MomentoCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
    tipo?: SortOrder
    palavras?: SortOrder
  }

  export type MomentoAvgOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
  }

  export type MomentoMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
    tipo?: SortOrder
    palavras?: SortOrder
  }

  export type MomentoMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
    tipo?: SortOrder
    palavras?: SortOrder
  }

  export type MomentoSumOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    score?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type RenderListRelationFilter = {
    every?: RenderWhereInput
    some?: RenderWhereInput
    none?: RenderWhereInput
  }

  export type PublicacaoListRelationFilter = {
    every?: PublicacaoWhereInput
    some?: PublicacaoWhereInput
    none?: PublicacaoWhereInput
  }

  export type RenderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PublicacaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CorteCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    preset?: SortOrder
    legendaOn?: SortOrder
    overlayOn?: SortOrder
    seed?: SortOrder
    parametrosUnicidade?: SortOrder
    status?: SortOrder
    saida?: SortOrder
  }

  export type CorteAvgOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
  }

  export type CorteMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    preset?: SortOrder
    legendaOn?: SortOrder
    overlayOn?: SortOrder
    seed?: SortOrder
    status?: SortOrder
    saida?: SortOrder
  }

  export type CorteMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
    preset?: SortOrder
    legendaOn?: SortOrder
    overlayOn?: SortOrder
    seed?: SortOrder
    status?: SortOrder
    saida?: SortOrder
  }

  export type CorteSumOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    ini?: SortOrder
    fim?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type CorteRelationFilter = {
    is?: CorteWhereInput
    isNot?: CorteWhereInput
  }

  export type RenderCountOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    arquivo?: SortOrder
    hashPerceptual?: SortOrder
    status?: SortOrder
    log?: SortOrder
  }

  export type RenderAvgOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
  }

  export type RenderMaxOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    arquivo?: SortOrder
    hashPerceptual?: SortOrder
    status?: SortOrder
    log?: SortOrder
  }

  export type RenderMinOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    arquivo?: SortOrder
    hashPerceptual?: SortOrder
    status?: SortOrder
    log?: SortOrder
  }

  export type RenderSumOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
  }

  export type PublicacaoCountOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    rede?: SortOrder
    status?: SortOrder
    url?: SortOrder
  }

  export type PublicacaoAvgOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
  }

  export type PublicacaoMaxOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    rede?: SortOrder
    status?: SortOrder
    url?: SortOrder
  }

  export type PublicacaoMinOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
    rede?: SortOrder
    status?: SortOrder
    url?: SortOrder
  }

  export type PublicacaoSumOrderByAggregateInput = {
    id?: SortOrder
    corteId?: SortOrder
  }

  export type JobCountOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    refId?: SortOrder
    status?: SortOrder
    progresso?: SortOrder
    log?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
  }

  export type JobAvgOrderByAggregateInput = {
    id?: SortOrder
    refId?: SortOrder
    progresso?: SortOrder
  }

  export type JobMaxOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    refId?: SortOrder
    status?: SortOrder
    progresso?: SortOrder
    log?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
  }

  export type JobMinOrderByAggregateInput = {
    id?: SortOrder
    tipo?: SortOrder
    refId?: SortOrder
    status?: SortOrder
    progresso?: SortOrder
    log?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
  }

  export type JobSumOrderByAggregateInput = {
    id?: SortOrder
    refId?: SortOrder
    progresso?: SortOrder
  }

  export type TranscricaoCountOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    texto?: SortOrder
    trechos?: SortOrder
  }

  export type TranscricaoAvgOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
  }

  export type TranscricaoMaxOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    texto?: SortOrder
  }

  export type TranscricaoMinOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
    texto?: SortOrder
  }

  export type TranscricaoSumOrderByAggregateInput = {
    id?: SortOrder
    videoId?: SortOrder
  }

  export type CorteCreateNestedManyWithoutVideoInput = {
    create?: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput> | CorteCreateWithoutVideoInput[] | CorteUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: CorteCreateOrConnectWithoutVideoInput | CorteCreateOrConnectWithoutVideoInput[]
    createMany?: CorteCreateManyVideoInputEnvelope
    connect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
  }

  export type TranscricaoCreateNestedManyWithoutVideoInput = {
    create?: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput> | TranscricaoCreateWithoutVideoInput[] | TranscricaoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: TranscricaoCreateOrConnectWithoutVideoInput | TranscricaoCreateOrConnectWithoutVideoInput[]
    createMany?: TranscricaoCreateManyVideoInputEnvelope
    connect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
  }

  export type MomentoCreateNestedManyWithoutVideoInput = {
    create?: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput> | MomentoCreateWithoutVideoInput[] | MomentoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: MomentoCreateOrConnectWithoutVideoInput | MomentoCreateOrConnectWithoutVideoInput[]
    createMany?: MomentoCreateManyVideoInputEnvelope
    connect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
  }

  export type CorteUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput> | CorteCreateWithoutVideoInput[] | CorteUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: CorteCreateOrConnectWithoutVideoInput | CorteCreateOrConnectWithoutVideoInput[]
    createMany?: CorteCreateManyVideoInputEnvelope
    connect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
  }

  export type TranscricaoUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput> | TranscricaoCreateWithoutVideoInput[] | TranscricaoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: TranscricaoCreateOrConnectWithoutVideoInput | TranscricaoCreateOrConnectWithoutVideoInput[]
    createMany?: TranscricaoCreateManyVideoInputEnvelope
    connect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
  }

  export type MomentoUncheckedCreateNestedManyWithoutVideoInput = {
    create?: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput> | MomentoCreateWithoutVideoInput[] | MomentoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: MomentoCreateOrConnectWithoutVideoInput | MomentoCreateOrConnectWithoutVideoInput[]
    createMany?: MomentoCreateManyVideoInputEnvelope
    connect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CorteUpdateManyWithoutVideoNestedInput = {
    create?: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput> | CorteCreateWithoutVideoInput[] | CorteUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: CorteCreateOrConnectWithoutVideoInput | CorteCreateOrConnectWithoutVideoInput[]
    upsert?: CorteUpsertWithWhereUniqueWithoutVideoInput | CorteUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: CorteCreateManyVideoInputEnvelope
    set?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    disconnect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    delete?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    connect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    update?: CorteUpdateWithWhereUniqueWithoutVideoInput | CorteUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: CorteUpdateManyWithWhereWithoutVideoInput | CorteUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: CorteScalarWhereInput | CorteScalarWhereInput[]
  }

  export type TranscricaoUpdateManyWithoutVideoNestedInput = {
    create?: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput> | TranscricaoCreateWithoutVideoInput[] | TranscricaoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: TranscricaoCreateOrConnectWithoutVideoInput | TranscricaoCreateOrConnectWithoutVideoInput[]
    upsert?: TranscricaoUpsertWithWhereUniqueWithoutVideoInput | TranscricaoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: TranscricaoCreateManyVideoInputEnvelope
    set?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    disconnect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    delete?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    connect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    update?: TranscricaoUpdateWithWhereUniqueWithoutVideoInput | TranscricaoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: TranscricaoUpdateManyWithWhereWithoutVideoInput | TranscricaoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: TranscricaoScalarWhereInput | TranscricaoScalarWhereInput[]
  }

  export type MomentoUpdateManyWithoutVideoNestedInput = {
    create?: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput> | MomentoCreateWithoutVideoInput[] | MomentoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: MomentoCreateOrConnectWithoutVideoInput | MomentoCreateOrConnectWithoutVideoInput[]
    upsert?: MomentoUpsertWithWhereUniqueWithoutVideoInput | MomentoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: MomentoCreateManyVideoInputEnvelope
    set?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    disconnect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    delete?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    connect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    update?: MomentoUpdateWithWhereUniqueWithoutVideoInput | MomentoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: MomentoUpdateManyWithWhereWithoutVideoInput | MomentoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: MomentoScalarWhereInput | MomentoScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CorteUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput> | CorteCreateWithoutVideoInput[] | CorteUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: CorteCreateOrConnectWithoutVideoInput | CorteCreateOrConnectWithoutVideoInput[]
    upsert?: CorteUpsertWithWhereUniqueWithoutVideoInput | CorteUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: CorteCreateManyVideoInputEnvelope
    set?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    disconnect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    delete?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    connect?: CorteWhereUniqueInput | CorteWhereUniqueInput[]
    update?: CorteUpdateWithWhereUniqueWithoutVideoInput | CorteUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: CorteUpdateManyWithWhereWithoutVideoInput | CorteUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: CorteScalarWhereInput | CorteScalarWhereInput[]
  }

  export type TranscricaoUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput> | TranscricaoCreateWithoutVideoInput[] | TranscricaoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: TranscricaoCreateOrConnectWithoutVideoInput | TranscricaoCreateOrConnectWithoutVideoInput[]
    upsert?: TranscricaoUpsertWithWhereUniqueWithoutVideoInput | TranscricaoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: TranscricaoCreateManyVideoInputEnvelope
    set?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    disconnect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    delete?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    connect?: TranscricaoWhereUniqueInput | TranscricaoWhereUniqueInput[]
    update?: TranscricaoUpdateWithWhereUniqueWithoutVideoInput | TranscricaoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: TranscricaoUpdateManyWithWhereWithoutVideoInput | TranscricaoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: TranscricaoScalarWhereInput | TranscricaoScalarWhereInput[]
  }

  export type MomentoUncheckedUpdateManyWithoutVideoNestedInput = {
    create?: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput> | MomentoCreateWithoutVideoInput[] | MomentoUncheckedCreateWithoutVideoInput[]
    connectOrCreate?: MomentoCreateOrConnectWithoutVideoInput | MomentoCreateOrConnectWithoutVideoInput[]
    upsert?: MomentoUpsertWithWhereUniqueWithoutVideoInput | MomentoUpsertWithWhereUniqueWithoutVideoInput[]
    createMany?: MomentoCreateManyVideoInputEnvelope
    set?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    disconnect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    delete?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    connect?: MomentoWhereUniqueInput | MomentoWhereUniqueInput[]
    update?: MomentoUpdateWithWhereUniqueWithoutVideoInput | MomentoUpdateWithWhereUniqueWithoutVideoInput[]
    updateMany?: MomentoUpdateManyWithWhereWithoutVideoInput | MomentoUpdateManyWithWhereWithoutVideoInput[]
    deleteMany?: MomentoScalarWhereInput | MomentoScalarWhereInput[]
  }

  export type VideoCreateNestedOneWithoutMomentosInput = {
    create?: XOR<VideoCreateWithoutMomentosInput, VideoUncheckedCreateWithoutMomentosInput>
    connectOrCreate?: VideoCreateOrConnectWithoutMomentosInput
    connect?: VideoWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type VideoUpdateOneRequiredWithoutMomentosNestedInput = {
    create?: XOR<VideoCreateWithoutMomentosInput, VideoUncheckedCreateWithoutMomentosInput>
    connectOrCreate?: VideoCreateOrConnectWithoutMomentosInput
    upsert?: VideoUpsertWithoutMomentosInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutMomentosInput, VideoUpdateWithoutMomentosInput>, VideoUncheckedUpdateWithoutMomentosInput>
  }

  export type VideoCreateNestedOneWithoutCortesInput = {
    create?: XOR<VideoCreateWithoutCortesInput, VideoUncheckedCreateWithoutCortesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutCortesInput
    connect?: VideoWhereUniqueInput
  }

  export type RenderCreateNestedManyWithoutCorteInput = {
    create?: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput> | RenderCreateWithoutCorteInput[] | RenderUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: RenderCreateOrConnectWithoutCorteInput | RenderCreateOrConnectWithoutCorteInput[]
    createMany?: RenderCreateManyCorteInputEnvelope
    connect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
  }

  export type PublicacaoCreateNestedManyWithoutCorteInput = {
    create?: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput> | PublicacaoCreateWithoutCorteInput[] | PublicacaoUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutCorteInput | PublicacaoCreateOrConnectWithoutCorteInput[]
    createMany?: PublicacaoCreateManyCorteInputEnvelope
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
  }

  export type RenderUncheckedCreateNestedManyWithoutCorteInput = {
    create?: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput> | RenderCreateWithoutCorteInput[] | RenderUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: RenderCreateOrConnectWithoutCorteInput | RenderCreateOrConnectWithoutCorteInput[]
    createMany?: RenderCreateManyCorteInputEnvelope
    connect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
  }

  export type PublicacaoUncheckedCreateNestedManyWithoutCorteInput = {
    create?: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput> | PublicacaoCreateWithoutCorteInput[] | PublicacaoUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutCorteInput | PublicacaoCreateOrConnectWithoutCorteInput[]
    createMany?: PublicacaoCreateManyCorteInputEnvelope
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type VideoUpdateOneRequiredWithoutCortesNestedInput = {
    create?: XOR<VideoCreateWithoutCortesInput, VideoUncheckedCreateWithoutCortesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutCortesInput
    upsert?: VideoUpsertWithoutCortesInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutCortesInput, VideoUpdateWithoutCortesInput>, VideoUncheckedUpdateWithoutCortesInput>
  }

  export type RenderUpdateManyWithoutCorteNestedInput = {
    create?: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput> | RenderCreateWithoutCorteInput[] | RenderUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: RenderCreateOrConnectWithoutCorteInput | RenderCreateOrConnectWithoutCorteInput[]
    upsert?: RenderUpsertWithWhereUniqueWithoutCorteInput | RenderUpsertWithWhereUniqueWithoutCorteInput[]
    createMany?: RenderCreateManyCorteInputEnvelope
    set?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    disconnect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    delete?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    connect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    update?: RenderUpdateWithWhereUniqueWithoutCorteInput | RenderUpdateWithWhereUniqueWithoutCorteInput[]
    updateMany?: RenderUpdateManyWithWhereWithoutCorteInput | RenderUpdateManyWithWhereWithoutCorteInput[]
    deleteMany?: RenderScalarWhereInput | RenderScalarWhereInput[]
  }

  export type PublicacaoUpdateManyWithoutCorteNestedInput = {
    create?: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput> | PublicacaoCreateWithoutCorteInput[] | PublicacaoUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutCorteInput | PublicacaoCreateOrConnectWithoutCorteInput[]
    upsert?: PublicacaoUpsertWithWhereUniqueWithoutCorteInput | PublicacaoUpsertWithWhereUniqueWithoutCorteInput[]
    createMany?: PublicacaoCreateManyCorteInputEnvelope
    set?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    disconnect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    delete?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    update?: PublicacaoUpdateWithWhereUniqueWithoutCorteInput | PublicacaoUpdateWithWhereUniqueWithoutCorteInput[]
    updateMany?: PublicacaoUpdateManyWithWhereWithoutCorteInput | PublicacaoUpdateManyWithWhereWithoutCorteInput[]
    deleteMany?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
  }

  export type RenderUncheckedUpdateManyWithoutCorteNestedInput = {
    create?: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput> | RenderCreateWithoutCorteInput[] | RenderUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: RenderCreateOrConnectWithoutCorteInput | RenderCreateOrConnectWithoutCorteInput[]
    upsert?: RenderUpsertWithWhereUniqueWithoutCorteInput | RenderUpsertWithWhereUniqueWithoutCorteInput[]
    createMany?: RenderCreateManyCorteInputEnvelope
    set?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    disconnect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    delete?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    connect?: RenderWhereUniqueInput | RenderWhereUniqueInput[]
    update?: RenderUpdateWithWhereUniqueWithoutCorteInput | RenderUpdateWithWhereUniqueWithoutCorteInput[]
    updateMany?: RenderUpdateManyWithWhereWithoutCorteInput | RenderUpdateManyWithWhereWithoutCorteInput[]
    deleteMany?: RenderScalarWhereInput | RenderScalarWhereInput[]
  }

  export type PublicacaoUncheckedUpdateManyWithoutCorteNestedInput = {
    create?: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput> | PublicacaoCreateWithoutCorteInput[] | PublicacaoUncheckedCreateWithoutCorteInput[]
    connectOrCreate?: PublicacaoCreateOrConnectWithoutCorteInput | PublicacaoCreateOrConnectWithoutCorteInput[]
    upsert?: PublicacaoUpsertWithWhereUniqueWithoutCorteInput | PublicacaoUpsertWithWhereUniqueWithoutCorteInput[]
    createMany?: PublicacaoCreateManyCorteInputEnvelope
    set?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    disconnect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    delete?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    connect?: PublicacaoWhereUniqueInput | PublicacaoWhereUniqueInput[]
    update?: PublicacaoUpdateWithWhereUniqueWithoutCorteInput | PublicacaoUpdateWithWhereUniqueWithoutCorteInput[]
    updateMany?: PublicacaoUpdateManyWithWhereWithoutCorteInput | PublicacaoUpdateManyWithWhereWithoutCorteInput[]
    deleteMany?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
  }

  export type CorteCreateNestedOneWithoutRendersInput = {
    create?: XOR<CorteCreateWithoutRendersInput, CorteUncheckedCreateWithoutRendersInput>
    connectOrCreate?: CorteCreateOrConnectWithoutRendersInput
    connect?: CorteWhereUniqueInput
  }

  export type CorteUpdateOneRequiredWithoutRendersNestedInput = {
    create?: XOR<CorteCreateWithoutRendersInput, CorteUncheckedCreateWithoutRendersInput>
    connectOrCreate?: CorteCreateOrConnectWithoutRendersInput
    upsert?: CorteUpsertWithoutRendersInput
    connect?: CorteWhereUniqueInput
    update?: XOR<XOR<CorteUpdateToOneWithWhereWithoutRendersInput, CorteUpdateWithoutRendersInput>, CorteUncheckedUpdateWithoutRendersInput>
  }

  export type CorteCreateNestedOneWithoutPublicacoesInput = {
    create?: XOR<CorteCreateWithoutPublicacoesInput, CorteUncheckedCreateWithoutPublicacoesInput>
    connectOrCreate?: CorteCreateOrConnectWithoutPublicacoesInput
    connect?: CorteWhereUniqueInput
  }

  export type CorteUpdateOneRequiredWithoutPublicacoesNestedInput = {
    create?: XOR<CorteCreateWithoutPublicacoesInput, CorteUncheckedCreateWithoutPublicacoesInput>
    connectOrCreate?: CorteCreateOrConnectWithoutPublicacoesInput
    upsert?: CorteUpsertWithoutPublicacoesInput
    connect?: CorteWhereUniqueInput
    update?: XOR<XOR<CorteUpdateToOneWithWhereWithoutPublicacoesInput, CorteUpdateWithoutPublicacoesInput>, CorteUncheckedUpdateWithoutPublicacoesInput>
  }

  export type VideoCreateNestedOneWithoutTranscricoesInput = {
    create?: XOR<VideoCreateWithoutTranscricoesInput, VideoUncheckedCreateWithoutTranscricoesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutTranscricoesInput
    connect?: VideoWhereUniqueInput
  }

  export type VideoUpdateOneRequiredWithoutTranscricoesNestedInput = {
    create?: XOR<VideoCreateWithoutTranscricoesInput, VideoUncheckedCreateWithoutTranscricoesInput>
    connectOrCreate?: VideoCreateOrConnectWithoutTranscricoesInput
    upsert?: VideoUpsertWithoutTranscricoesInput
    connect?: VideoWhereUniqueInput
    update?: XOR<XOR<VideoUpdateToOneWithWhereWithoutTranscricoesInput, VideoUpdateWithoutTranscricoesInput>, VideoUncheckedUpdateWithoutTranscricoesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CorteCreateWithoutVideoInput = {
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    renders?: RenderCreateNestedManyWithoutCorteInput
    publicacoes?: PublicacaoCreateNestedManyWithoutCorteInput
  }

  export type CorteUncheckedCreateWithoutVideoInput = {
    id?: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    renders?: RenderUncheckedCreateNestedManyWithoutCorteInput
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutCorteInput
  }

  export type CorteCreateOrConnectWithoutVideoInput = {
    where: CorteWhereUniqueInput
    create: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput>
  }

  export type CorteCreateManyVideoInputEnvelope = {
    data: CorteCreateManyVideoInput | CorteCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type TranscricaoCreateWithoutVideoInput = {
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUncheckedCreateWithoutVideoInput = {
    id?: number
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoCreateOrConnectWithoutVideoInput = {
    where: TranscricaoWhereUniqueInput
    create: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput>
  }

  export type TranscricaoCreateManyVideoInputEnvelope = {
    data: TranscricaoCreateManyVideoInput | TranscricaoCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type MomentoCreateWithoutVideoInput = {
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
  }

  export type MomentoUncheckedCreateWithoutVideoInput = {
    id?: number
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
  }

  export type MomentoCreateOrConnectWithoutVideoInput = {
    where: MomentoWhereUniqueInput
    create: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput>
  }

  export type MomentoCreateManyVideoInputEnvelope = {
    data: MomentoCreateManyVideoInput | MomentoCreateManyVideoInput[]
    skipDuplicates?: boolean
  }

  export type CorteUpsertWithWhereUniqueWithoutVideoInput = {
    where: CorteWhereUniqueInput
    update: XOR<CorteUpdateWithoutVideoInput, CorteUncheckedUpdateWithoutVideoInput>
    create: XOR<CorteCreateWithoutVideoInput, CorteUncheckedCreateWithoutVideoInput>
  }

  export type CorteUpdateWithWhereUniqueWithoutVideoInput = {
    where: CorteWhereUniqueInput
    data: XOR<CorteUpdateWithoutVideoInput, CorteUncheckedUpdateWithoutVideoInput>
  }

  export type CorteUpdateManyWithWhereWithoutVideoInput = {
    where: CorteScalarWhereInput
    data: XOR<CorteUpdateManyMutationInput, CorteUncheckedUpdateManyWithoutVideoInput>
  }

  export type CorteScalarWhereInput = {
    AND?: CorteScalarWhereInput | CorteScalarWhereInput[]
    OR?: CorteScalarWhereInput[]
    NOT?: CorteScalarWhereInput | CorteScalarWhereInput[]
    id?: IntFilter<"Corte"> | number
    videoId?: IntFilter<"Corte"> | number
    ini?: FloatFilter<"Corte"> | number
    fim?: FloatFilter<"Corte"> | number
    preset?: StringFilter<"Corte"> | string
    legendaOn?: BoolFilter<"Corte"> | boolean
    overlayOn?: BoolFilter<"Corte"> | boolean
    seed?: StringNullableFilter<"Corte"> | string | null
    parametrosUnicidade?: JsonNullableFilter<"Corte">
    status?: StringFilter<"Corte"> | string
    saida?: StringNullableFilter<"Corte"> | string | null
  }

  export type TranscricaoUpsertWithWhereUniqueWithoutVideoInput = {
    where: TranscricaoWhereUniqueInput
    update: XOR<TranscricaoUpdateWithoutVideoInput, TranscricaoUncheckedUpdateWithoutVideoInput>
    create: XOR<TranscricaoCreateWithoutVideoInput, TranscricaoUncheckedCreateWithoutVideoInput>
  }

  export type TranscricaoUpdateWithWhereUniqueWithoutVideoInput = {
    where: TranscricaoWhereUniqueInput
    data: XOR<TranscricaoUpdateWithoutVideoInput, TranscricaoUncheckedUpdateWithoutVideoInput>
  }

  export type TranscricaoUpdateManyWithWhereWithoutVideoInput = {
    where: TranscricaoScalarWhereInput
    data: XOR<TranscricaoUpdateManyMutationInput, TranscricaoUncheckedUpdateManyWithoutVideoInput>
  }

  export type TranscricaoScalarWhereInput = {
    AND?: TranscricaoScalarWhereInput | TranscricaoScalarWhereInput[]
    OR?: TranscricaoScalarWhereInput[]
    NOT?: TranscricaoScalarWhereInput | TranscricaoScalarWhereInput[]
    id?: IntFilter<"Transcricao"> | number
    videoId?: IntFilter<"Transcricao"> | number
    texto?: StringFilter<"Transcricao"> | string
    trechos?: JsonNullableFilter<"Transcricao">
  }

  export type MomentoUpsertWithWhereUniqueWithoutVideoInput = {
    where: MomentoWhereUniqueInput
    update: XOR<MomentoUpdateWithoutVideoInput, MomentoUncheckedUpdateWithoutVideoInput>
    create: XOR<MomentoCreateWithoutVideoInput, MomentoUncheckedCreateWithoutVideoInput>
  }

  export type MomentoUpdateWithWhereUniqueWithoutVideoInput = {
    where: MomentoWhereUniqueInput
    data: XOR<MomentoUpdateWithoutVideoInput, MomentoUncheckedUpdateWithoutVideoInput>
  }

  export type MomentoUpdateManyWithWhereWithoutVideoInput = {
    where: MomentoScalarWhereInput
    data: XOR<MomentoUpdateManyMutationInput, MomentoUncheckedUpdateManyWithoutVideoInput>
  }

  export type MomentoScalarWhereInput = {
    AND?: MomentoScalarWhereInput | MomentoScalarWhereInput[]
    OR?: MomentoScalarWhereInput[]
    NOT?: MomentoScalarWhereInput | MomentoScalarWhereInput[]
    id?: IntFilter<"Momento"> | number
    videoId?: IntFilter<"Momento"> | number
    ini?: FloatFilter<"Momento"> | number
    fim?: FloatFilter<"Momento"> | number
    score?: FloatFilter<"Momento"> | number
    tipo?: StringFilter<"Momento"> | string
    palavras?: StringNullableFilter<"Momento"> | string | null
  }

  export type VideoCreateWithoutMomentosInput = {
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteCreateNestedManyWithoutVideoInput
    transcricoes?: TranscricaoCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutMomentosInput = {
    id?: number
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteUncheckedCreateNestedManyWithoutVideoInput
    transcricoes?: TranscricaoUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutMomentosInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutMomentosInput, VideoUncheckedCreateWithoutMomentosInput>
  }

  export type VideoUpsertWithoutMomentosInput = {
    update: XOR<VideoUpdateWithoutMomentosInput, VideoUncheckedUpdateWithoutMomentosInput>
    create: XOR<VideoCreateWithoutMomentosInput, VideoUncheckedCreateWithoutMomentosInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutMomentosInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutMomentosInput, VideoUncheckedUpdateWithoutMomentosInput>
  }

  export type VideoUpdateWithoutMomentosInput = {
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUpdateManyWithoutVideoNestedInput
    transcricoes?: TranscricaoUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutMomentosInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUncheckedUpdateManyWithoutVideoNestedInput
    transcricoes?: TranscricaoUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type VideoCreateWithoutCortesInput = {
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    transcricoes?: TranscricaoCreateNestedManyWithoutVideoInput
    momentos?: MomentoCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutCortesInput = {
    id?: number
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    transcricoes?: TranscricaoUncheckedCreateNestedManyWithoutVideoInput
    momentos?: MomentoUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutCortesInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutCortesInput, VideoUncheckedCreateWithoutCortesInput>
  }

  export type RenderCreateWithoutCorteInput = {
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
  }

  export type RenderUncheckedCreateWithoutCorteInput = {
    id?: number
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
  }

  export type RenderCreateOrConnectWithoutCorteInput = {
    where: RenderWhereUniqueInput
    create: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput>
  }

  export type RenderCreateManyCorteInputEnvelope = {
    data: RenderCreateManyCorteInput | RenderCreateManyCorteInput[]
    skipDuplicates?: boolean
  }

  export type PublicacaoCreateWithoutCorteInput = {
    rede: string
    status?: string
    url?: string | null
  }

  export type PublicacaoUncheckedCreateWithoutCorteInput = {
    id?: number
    rede: string
    status?: string
    url?: string | null
  }

  export type PublicacaoCreateOrConnectWithoutCorteInput = {
    where: PublicacaoWhereUniqueInput
    create: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput>
  }

  export type PublicacaoCreateManyCorteInputEnvelope = {
    data: PublicacaoCreateManyCorteInput | PublicacaoCreateManyCorteInput[]
    skipDuplicates?: boolean
  }

  export type VideoUpsertWithoutCortesInput = {
    update: XOR<VideoUpdateWithoutCortesInput, VideoUncheckedUpdateWithoutCortesInput>
    create: XOR<VideoCreateWithoutCortesInput, VideoUncheckedCreateWithoutCortesInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutCortesInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutCortesInput, VideoUncheckedUpdateWithoutCortesInput>
  }

  export type VideoUpdateWithoutCortesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    transcricoes?: TranscricaoUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutCortesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    transcricoes?: TranscricaoUncheckedUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type RenderUpsertWithWhereUniqueWithoutCorteInput = {
    where: RenderWhereUniqueInput
    update: XOR<RenderUpdateWithoutCorteInput, RenderUncheckedUpdateWithoutCorteInput>
    create: XOR<RenderCreateWithoutCorteInput, RenderUncheckedCreateWithoutCorteInput>
  }

  export type RenderUpdateWithWhereUniqueWithoutCorteInput = {
    where: RenderWhereUniqueInput
    data: XOR<RenderUpdateWithoutCorteInput, RenderUncheckedUpdateWithoutCorteInput>
  }

  export type RenderUpdateManyWithWhereWithoutCorteInput = {
    where: RenderScalarWhereInput
    data: XOR<RenderUpdateManyMutationInput, RenderUncheckedUpdateManyWithoutCorteInput>
  }

  export type RenderScalarWhereInput = {
    AND?: RenderScalarWhereInput | RenderScalarWhereInput[]
    OR?: RenderScalarWhereInput[]
    NOT?: RenderScalarWhereInput | RenderScalarWhereInput[]
    id?: IntFilter<"Render"> | number
    corteId?: IntFilter<"Render"> | number
    arquivo?: StringNullableFilter<"Render"> | string | null
    hashPerceptual?: StringNullableFilter<"Render"> | string | null
    status?: StringFilter<"Render"> | string
    log?: StringNullableFilter<"Render"> | string | null
  }

  export type PublicacaoUpsertWithWhereUniqueWithoutCorteInput = {
    where: PublicacaoWhereUniqueInput
    update: XOR<PublicacaoUpdateWithoutCorteInput, PublicacaoUncheckedUpdateWithoutCorteInput>
    create: XOR<PublicacaoCreateWithoutCorteInput, PublicacaoUncheckedCreateWithoutCorteInput>
  }

  export type PublicacaoUpdateWithWhereUniqueWithoutCorteInput = {
    where: PublicacaoWhereUniqueInput
    data: XOR<PublicacaoUpdateWithoutCorteInput, PublicacaoUncheckedUpdateWithoutCorteInput>
  }

  export type PublicacaoUpdateManyWithWhereWithoutCorteInput = {
    where: PublicacaoScalarWhereInput
    data: XOR<PublicacaoUpdateManyMutationInput, PublicacaoUncheckedUpdateManyWithoutCorteInput>
  }

  export type PublicacaoScalarWhereInput = {
    AND?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
    OR?: PublicacaoScalarWhereInput[]
    NOT?: PublicacaoScalarWhereInput | PublicacaoScalarWhereInput[]
    id?: IntFilter<"Publicacao"> | number
    corteId?: IntFilter<"Publicacao"> | number
    rede?: StringFilter<"Publicacao"> | string
    status?: StringFilter<"Publicacao"> | string
    url?: StringNullableFilter<"Publicacao"> | string | null
  }

  export type CorteCreateWithoutRendersInput = {
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    Video: VideoCreateNestedOneWithoutCortesInput
    publicacoes?: PublicacaoCreateNestedManyWithoutCorteInput
  }

  export type CorteUncheckedCreateWithoutRendersInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    publicacoes?: PublicacaoUncheckedCreateNestedManyWithoutCorteInput
  }

  export type CorteCreateOrConnectWithoutRendersInput = {
    where: CorteWhereUniqueInput
    create: XOR<CorteCreateWithoutRendersInput, CorteUncheckedCreateWithoutRendersInput>
  }

  export type CorteUpsertWithoutRendersInput = {
    update: XOR<CorteUpdateWithoutRendersInput, CorteUncheckedUpdateWithoutRendersInput>
    create: XOR<CorteCreateWithoutRendersInput, CorteUncheckedCreateWithoutRendersInput>
    where?: CorteWhereInput
  }

  export type CorteUpdateToOneWithWhereWithoutRendersInput = {
    where?: CorteWhereInput
    data: XOR<CorteUpdateWithoutRendersInput, CorteUncheckedUpdateWithoutRendersInput>
  }

  export type CorteUpdateWithoutRendersInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    Video?: VideoUpdateOneRequiredWithoutCortesNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutCorteNestedInput
  }

  export type CorteUncheckedUpdateWithoutRendersInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutCorteNestedInput
  }

  export type CorteCreateWithoutPublicacoesInput = {
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    Video: VideoCreateNestedOneWithoutCortesInput
    renders?: RenderCreateNestedManyWithoutCorteInput
  }

  export type CorteUncheckedCreateWithoutPublicacoesInput = {
    id?: number
    videoId: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
    renders?: RenderUncheckedCreateNestedManyWithoutCorteInput
  }

  export type CorteCreateOrConnectWithoutPublicacoesInput = {
    where: CorteWhereUniqueInput
    create: XOR<CorteCreateWithoutPublicacoesInput, CorteUncheckedCreateWithoutPublicacoesInput>
  }

  export type CorteUpsertWithoutPublicacoesInput = {
    update: XOR<CorteUpdateWithoutPublicacoesInput, CorteUncheckedUpdateWithoutPublicacoesInput>
    create: XOR<CorteCreateWithoutPublicacoesInput, CorteUncheckedCreateWithoutPublicacoesInput>
    where?: CorteWhereInput
  }

  export type CorteUpdateToOneWithWhereWithoutPublicacoesInput = {
    where?: CorteWhereInput
    data: XOR<CorteUpdateWithoutPublicacoesInput, CorteUncheckedUpdateWithoutPublicacoesInput>
  }

  export type CorteUpdateWithoutPublicacoesInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    Video?: VideoUpdateOneRequiredWithoutCortesNestedInput
    renders?: RenderUpdateManyWithoutCorteNestedInput
  }

  export type CorteUncheckedUpdateWithoutPublicacoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    videoId?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    renders?: RenderUncheckedUpdateManyWithoutCorteNestedInput
  }

  export type VideoCreateWithoutTranscricoesInput = {
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteCreateNestedManyWithoutVideoInput
    momentos?: MomentoCreateNestedManyWithoutVideoInput
  }

  export type VideoUncheckedCreateWithoutTranscricoesInput = {
    id?: number
    nome: string
    caminho: string
    largura?: number | null
    altura?: number | null
    duracao?: number | null
    status?: string
    criadoEm?: Date | string
    cortes?: CorteUncheckedCreateNestedManyWithoutVideoInput
    momentos?: MomentoUncheckedCreateNestedManyWithoutVideoInput
  }

  export type VideoCreateOrConnectWithoutTranscricoesInput = {
    where: VideoWhereUniqueInput
    create: XOR<VideoCreateWithoutTranscricoesInput, VideoUncheckedCreateWithoutTranscricoesInput>
  }

  export type VideoUpsertWithoutTranscricoesInput = {
    update: XOR<VideoUpdateWithoutTranscricoesInput, VideoUncheckedUpdateWithoutTranscricoesInput>
    create: XOR<VideoCreateWithoutTranscricoesInput, VideoUncheckedCreateWithoutTranscricoesInput>
    where?: VideoWhereInput
  }

  export type VideoUpdateToOneWithWhereWithoutTranscricoesInput = {
    where?: VideoWhereInput
    data: XOR<VideoUpdateWithoutTranscricoesInput, VideoUncheckedUpdateWithoutTranscricoesInput>
  }

  export type VideoUpdateWithoutTranscricoesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUpdateManyWithoutVideoNestedInput
  }

  export type VideoUncheckedUpdateWithoutTranscricoesInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    caminho?: StringFieldUpdateOperationsInput | string
    largura?: NullableIntFieldUpdateOperationsInput | number | null
    altura?: NullableIntFieldUpdateOperationsInput | number | null
    duracao?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    cortes?: CorteUncheckedUpdateManyWithoutVideoNestedInput
    momentos?: MomentoUncheckedUpdateManyWithoutVideoNestedInput
  }

  export type CorteCreateManyVideoInput = {
    id?: number
    ini: number
    fim: number
    preset?: string
    legendaOn?: boolean
    overlayOn?: boolean
    seed?: string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: string
    saida?: string | null
  }

  export type TranscricaoCreateManyVideoInput = {
    id?: number
    texto: string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MomentoCreateManyVideoInput = {
    id?: number
    ini: number
    fim: number
    score: number
    tipo: string
    palavras?: string | null
  }

  export type CorteUpdateWithoutVideoInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    renders?: RenderUpdateManyWithoutCorteNestedInput
    publicacoes?: PublicacaoUpdateManyWithoutCorteNestedInput
  }

  export type CorteUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
    renders?: RenderUncheckedUpdateManyWithoutCorteNestedInput
    publicacoes?: PublicacaoUncheckedUpdateManyWithoutCorteNestedInput
  }

  export type CorteUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    preset?: StringFieldUpdateOperationsInput | string
    legendaOn?: BoolFieldUpdateOperationsInput | boolean
    overlayOn?: BoolFieldUpdateOperationsInput | boolean
    seed?: NullableStringFieldUpdateOperationsInput | string | null
    parametrosUnicidade?: NullableJsonNullValueInput | InputJsonValue
    status?: StringFieldUpdateOperationsInput | string
    saida?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TranscricaoUpdateWithoutVideoInput = {
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type TranscricaoUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    texto?: StringFieldUpdateOperationsInput | string
    trechos?: NullableJsonNullValueInput | InputJsonValue
  }

  export type MomentoUpdateWithoutVideoInput = {
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MomentoUncheckedUpdateWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MomentoUncheckedUpdateManyWithoutVideoInput = {
    id?: IntFieldUpdateOperationsInput | number
    ini?: FloatFieldUpdateOperationsInput | number
    fim?: FloatFieldUpdateOperationsInput | number
    score?: FloatFieldUpdateOperationsInput | number
    tipo?: StringFieldUpdateOperationsInput | string
    palavras?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderCreateManyCorteInput = {
    id?: number
    arquivo?: string | null
    hashPerceptual?: string | null
    status?: string
    log?: string | null
  }

  export type PublicacaoCreateManyCorteInput = {
    id?: number
    rede: string
    status?: string
    url?: string | null
  }

  export type RenderUpdateWithoutCorteInput = {
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderUncheckedUpdateWithoutCorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RenderUncheckedUpdateManyWithoutCorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    arquivo?: NullableStringFieldUpdateOperationsInput | string | null
    hashPerceptual?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    log?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoUpdateWithoutCorteInput = {
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoUncheckedUpdateWithoutCorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PublicacaoUncheckedUpdateManyWithoutCorteInput = {
    id?: IntFieldUpdateOperationsInput | number
    rede?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    url?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use VideoCountOutputTypeDefaultArgs instead
     */
    export type VideoCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideoCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CorteCountOutputTypeDefaultArgs instead
     */
    export type CorteCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CorteCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VideoDefaultArgs instead
     */
    export type VideoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VideoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MomentoDefaultArgs instead
     */
    export type MomentoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MomentoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CorteDefaultArgs instead
     */
    export type CorteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CorteDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RenderDefaultArgs instead
     */
    export type RenderArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RenderDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PublicacaoDefaultArgs instead
     */
    export type PublicacaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PublicacaoDefaultArgs<ExtArgs>
    /**
     * @deprecated Use JobDefaultArgs instead
     */
    export type JobArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = JobDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TranscricaoDefaultArgs instead
     */
    export type TranscricaoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TranscricaoDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}