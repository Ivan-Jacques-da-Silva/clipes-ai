// backend/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Video {
  id           Int           @id @default(autoincrement())
  nome         String
  caminho      String
  largura      Int?
  altura       Int?
  duracao      Float?
  status       String        @default("pronto")
  criadoEm     DateTime      @default(now())
  cortes       Corte[]
  transcricoes Transcricao[]
  momentos     Momento[]
}

model Momento {
  id       Int     @id @default(autoincrement())
  videoId  Int
  ini      Float
  fim      Float
  score    Float
  tipo     String
  palavras String?
  Video    Video   @relation(fields: [videoId], references: [id], onDelete: Cascade)
}

model Corte {
  id                  Int          @id @default(autoincrement())
  videoId             Int
  ini                 Float
  fim                 Float
  preset              String       @default("9x16")
  legendaOn           Boolean      @default(false)
  overlayOn           Boolean      @default(true)
  seed                String?
  parametrosUnicidade Json?
  status              String       @default("pendente")
  saida               String?
  Video               Video        @relation(fields: [videoId], references: [id], onDelete: Cascade)
  renders             Render[]
  publicacoes         Publicacao[]
}

model Render {
  id             Int     @id @default(autoincrement())
  corteId        Int
  arquivo        String?
  hashPerceptual String?
  status         String  @default("pendente")
  log            String?
  Corte          Corte   @relation(fields: [corteId], references: [id], onDelete: Cascade)
}

model Publicacao {
  id      Int     @id @default(autoincrement())
  corteId Int
  rede    String
  status  String  @default("pendente")
  url     String?
  Corte   Corte   @relation(fields: [corteId], references: [id], onDelete: Cascade)
}

model Job {
  id           Int      @id @default(autoincrement())
  tipo         String
  refId        Int?
  status       String   @default("pendente")
  progresso    Int      @default(0)
  log          String?
  criadoEm     DateTime @default(now())
  atualizadoEm DateTime @updatedAt
}

model Transcricao {
  id      Int    @id @default(autoincrement())
  videoId Int
  texto   String
  trechos Json?
  Video   Video  @relation(fields: [videoId], references: [id], onDelete: Cascade)
}
